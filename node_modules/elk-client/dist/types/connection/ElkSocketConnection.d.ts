/// <reference types="node" />
import { EventEmitter } from 'events';
import ElkSocketConnectionOptions from './ElkSocketConnectionOptions';
import ElkConnection from './ElkConnection';
import ElkConnectionState from './ElkConnectionState';
/**
 * A connection to an Elk M1 via a TCP socket.
 */
declare class ElkSocketConnection extends EventEmitter implements ElkConnection {
    readonly initialOptions: Partial<ElkSocketConnectionOptions>;
    /**
     * The current options being used for this connection.
     */
    readonly options: ElkSocketConnectionOptions;
    /**
     * The underlying socket connection. Only defined when the connection
     * is active (not `Disconnected`).
     * Do not set this directly -- use {@link setSocket}
     */
    private _socket;
    /**
     * The most recent state of the connection.
     * Used by {@link checkForStateChange} to determine if a state change
     * event needs to be emitted.
     */
    private _lastState;
    constructor(initialOptions?: Partial<ElkSocketConnectionOptions>);
    /**
     * The current state of the connection.
     */
    get state(): ElkConnectionState;
    /**
     * Sets the underlying socket being used by the connection.
     */
    private setSocket;
    /**
     * Checks to see if the current connection state has changed and
     * emits the appropriate event if it has.
     */
    private checkForStateChange;
    /**
     * Called when the socket emits it's "connect" event.
     */
    private onSocketConnect;
    /**
     * Called when the socket emits a "data" event.
     */
    private onSocketData;
    /**
     * Called when the M1 closes the connection.
     */
    private onSocketEnd;
    /**
     * Called when the socket is completely closed.
     */
    private onSocketClose;
    /**
     * Called when the underlying socket emits an error event.
     */
    private onSocketError;
    /**
     * Called when the underlying socket has no activity within the `idleTimeout`
     * time. This will cause the socket to be disconnected.
     */
    private onSocketTimeout;
    /**
     * Attempst to connect to the Elk M1
     * This should only be called when the connection is in a disconnected state,
     * otherwise it will fail with a {@link NotConnectableError}
     * @param timeout How long to wait for a connection to be established,
     *   after which the connect() call will fail.
     * @throws {NotConnectableError} if the socket is not currently disconnected.
     */
    connect(timeout?: number): Promise<ElkSocketConnection>;
    /**
     * Disconnect the current socket connection.
     * @param timeout How long to wait before forcefully disconnecting.
     */
    disconnect(timeout?: number): Promise<ElkSocketConnection>;
    /**
     * Sends data to the Elk M1. Typically this is an Elk Message packet
     * (but can also be arbitrary data, as is the case when authenticating).
     */
    write(data: string): Promise<unknown>;
}
export default ElkSocketConnection;
