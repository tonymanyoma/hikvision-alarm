"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var elk_message_1 = require("elk-message");
var ElkConnectionState_1 = require("./connection/ElkConnectionState");
var ElkClientCommands_1 = require("./ElkClientCommands");
var ElkClientState_1 = require("./ElkClientState");
var AuthenticationFailedError_1 = require("./errors/AuthenticationFailedError");
var ElkSocketConnection_1 = require("./connection/ElkSocketConnection");
var withTimeout_1 = require("./withTimeout");
/**
 * The control panel sends this when prompting for a username.
 */
var USERNAME_REQUEST = '\r\nUsername: ';
/**
 * The control panel sends this when prompting for a password.
 */
var PASSWORD_REQUEST = '\r\nPassword: ';
/**
 * The control panel sends this when logging in fails.
 */
var LOGIN_FAILURE = '\r\nUsername/Password not found.\r\n';
/**
 * The control panel sends this when logging in is susccessful
 */
var LOGIN_SUCCESSFUL = '\r\nElk-M1XEP: Login successful.\r\n';
/**
 * The default timeout for command responses when not specified.
 */
var DEFAULT_RESPONSE_TIMEOUT = 30 * 1000;
/**
 * The default connect timeout value when not specified.
 */
var DEFAULT_CONNECT_TIMEOUT = 60 * 1000;
var ElkClient = /** @class */ (function (_super) {
    __extends(ElkClient, _super);
    function ElkClient(options) {
        if (options === void 0) { options = { connection: {} }; }
        var _this = _super.call(this) || this;
        _this.options = options;
        _this._state = ElkClientState_1.default.Disconnected;
        _this._authenticated = false;
        _this.onConnectionConnected = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.emit('connected');
                // At this point we may need to authenticate.
                // The panel will send "\r\nUsername: " to request
                // the username. and that will cause the authentication
                // process to be triggered and that will eventually
                // lead to a "ready" or "error" being emitted, depending
                // on whether the authentication was successful.
                // But in the case that we DON'T need to authenticate,
                // we just immediately trigger the ready state. Otherwise
                // we'd have to wait for the panel to emit some data
                // to trigger that, and that could be up to 30 seconds
                // depending on the timing (an "XK" message is emitted
                // every 30 seconds).
                if (!this.options.username) {
                    this.onReady(false);
                }
                return [2 /*return*/];
            });
        }); };
        _this.onConnectionDisconnecting = function () {
            _this._state = ElkClientState_1.default.Disconnecting;
            _this.emit('disconnecting');
        };
        _this.onConnectionDisconnected = function () {
            _this._state = ElkClientState_1.default.Disconnected;
            _this._authenticated = false;
            _this.emit('disconnected');
        };
        _this.onConnectionError = function (error) {
            _this.emit('error', error);
        };
        _this.onConnectionData = function (data) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = data;
                        switch (_a) {
                            case USERNAME_REQUEST: return [3 /*break*/, 1];
                            case PASSWORD_REQUEST: return [3 /*break*/, 4];
                            case LOGIN_FAILURE: return [3 /*break*/, 7];
                            case LOGIN_SUCCESSFUL: return [3 /*break*/, 9];
                        }
                        return [3 /*break*/, 10];
                    case 1:
                        if (!!this.options.username) return [3 /*break*/, 3];
                        this.emit('error', new AuthenticationFailedError_1.default(AuthenticationFailedError_1.AuthenticationFailedReason.MissingUsername, 'Username was requested but none was provided.'));
                        return [4 /*yield*/, this.disconnect()];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                    case 3:
                        this._state = ElkClientState_1.default.Authenticating;
                        this.emit('authenticating');
                        this._connection.write(this.options.username + '\r\n').catch(function () { return undefined; });
                        return [3 /*break*/, 11];
                    case 4:
                        if (!!this.options.password) return [3 /*break*/, 6];
                        this.emit('error', new AuthenticationFailedError_1.default(AuthenticationFailedError_1.AuthenticationFailedReason.MissingPassword, 'Password was requested but none was provided.'));
                        return [4 /*yield*/, this.disconnect()];
                    case 5:
                        _b.sent();
                        return [2 /*return*/];
                    case 6:
                        this._connection.write(this.options.password + '\r\n').catch(function () { return undefined; });
                        return [3 /*break*/, 11];
                    case 7:
                        this.emit('error', new AuthenticationFailedError_1.default(AuthenticationFailedError_1.AuthenticationFailedReason.InvalidCredentials, 'Login failed, invalid username or password.'));
                        return [4 /*yield*/, this.disconnect()];
                    case 8:
                        _b.sent();
                        return [2 /*return*/];
                    case 9:
                        {
                            this.onReady(true);
                            return [3 /*break*/, 11];
                        }
                        _b.label = 10;
                    case 10:
                        {
                            // We need to ignore any other responses while we're authenticating
                            // because the username and password will be echoed back
                            if (this._state !== ElkClientState_1.default.Authenticating) {
                                if (!this.isReady && this.isConnected) {
                                    // If we're getting data and connected, but not "ready",
                                    // we need to switch to a ready state. This could happen if
                                    // a username was provided but not requested by the control
                                    // panel.
                                    this.onReady();
                                }
                                // The M1 doesn't always send a single packet, so we need to check
                                // for multiple packets at once.
                                data
                                    .split(/\r\n|\r|\n/)
                                    .filter(function (packet) { return !!packet; })
                                    .forEach(function (packet) {
                                    if (packet === 'OK') {
                                        _this.emit('ok');
                                    }
                                    else {
                                        _this.emit('message', elk_message_1.parse(packet + '\r\n'));
                                    }
                                });
                            }
                        }
                        _b.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        }); };
        _this._connection = new ElkSocketConnection_1.default(options.connection);
        _this._connection.on('connected', _this.onConnectionConnected);
        _this._connection.on('disconnecting', _this.onConnectionDisconnecting);
        _this._connection.on('disconnected', _this.onConnectionDisconnected);
        _this._connection.on('data', _this.onConnectionData);
        _this._connection.on('error', _this.onConnectionError);
        return _this;
    }
    Object.defineProperty(ElkClient.prototype, "connection", {
        /**
         * Gets the underlying ElkConnection.
         */
        get: function () {
            return this._connection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElkClient.prototype, "defaultTimeout", {
        /**
         * The default number of milliseconds to wait for a command
         * response before returning a timeout error.
         */
        get: function () {
            return this.options.responseTimeout || DEFAULT_RESPONSE_TIMEOUT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElkClient.prototype, "authenticated", {
        /**
         * True if the currently authenticated; otherwise, false.
         */
        get: function () {
            return this._authenticated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElkClient.prototype, "state", {
        /**
         * The client's current state.
         */
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElkClient.prototype, "isReady", {
        /**
         * True if the client is in a ready state and is able
         * to communicate with the Elk M1.
         */
        get: function () {
            return this._state === ElkClientState_1.default.Ready;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElkClient.prototype, "isConnected", {
        /**
         * True if the underlying connection is connected.
         */
        get: function () {
            return this._connection.state === ElkConnectionState_1.default.Connected;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Attempts to connect (and authenticate, if needed) to the Elk M1.
     * Resolves when the client become ready, or rejects if there is an
     * error or if a ready state cannot be reached within the timeout
     * period.
     * @param timeoutMs How long to wait for the client to become
     *   ready.
     */
    ElkClient.prototype.connect = function (timeoutMs) {
        if (timeoutMs === void 0) { timeoutMs = this.options.connectTimeout || DEFAULT_CONNECT_TIMEOUT; }
        return __awaiter(this, void 0, void 0, function () {
            var errorListener, readyListener;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.state === ElkClientState_1.default.Ready) {
                    return [2 /*return*/, Promise.resolve(this)];
                }
                return [2 /*return*/, withTimeout_1.default(timeoutMs, new Promise(function (resolve, reject) {
                        readyListener = function () { return resolve(); };
                        errorListener = function (error) { return reject(error); };
                        _this.on('ready', readyListener);
                        _this.on('error', errorListener);
                        // We can safely ignore rejected promises from these
                        // connect calls because they will also trigger
                        // error callbacks, which we will be listening for.
                        if (_this._connection.state === ElkConnectionState_1.default.Disconnecting) {
                            // If we're in the process of closing the connection, wait for it
                            // to close then try to connect.
                            _this._connection
                                .disconnect()
                                .then(function () { return _this._connection.connect(); })
                                .catch(function () { return undefined; });
                        }
                        else {
                            _this._connection.connect().catch(function () { return undefined; });
                        }
                    }))
                        .catch(function (error) {
                        _this.removeListener('ready', readyListener);
                        _this.removeListener('error', errorListener);
                        throw error;
                    })
                        .then(function () {
                        _this.removeListener('ready', readyListener);
                        _this.removeListener('error', errorListener);
                        return _this;
                    })];
            });
        });
    };
    /**
     * Disconnects the current connection and resolves
     * when completed.
     */
    ElkClient.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._connection.disconnect()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sends a command to the Elk M1 control panel.
     */
    ElkClient.prototype.sendCommand = function (command, timeoutMs) {
        if (timeoutMs === void 0) { timeoutMs = this.defaultTimeout; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, withTimeout_1.default(timeoutMs, this._connection.write(command.raw).then(function () { return undefined; }))];
            });
        });
    };
    ElkClient.prototype.onReady = function (authenticated) {
        if (authenticated === void 0) { authenticated = false; }
        this._state = ElkClientState_1.default.Ready;
        if (authenticated) {
            this._authenticated = true;
            this.emit('authenticated');
        }
        this.emit('ready');
    };
    return ElkClient;
}(ElkClientCommands_1.default));
exports.default = ElkClient;
//# sourceMappingURL=ElkClient.js.map