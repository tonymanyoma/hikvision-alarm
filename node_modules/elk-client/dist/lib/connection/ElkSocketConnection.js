"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var createSocket_1 = require("./createSocket");
var ElkSocketConnectionOptions_1 = require("./ElkSocketConnectionOptions");
var ElkConnection_1 = require("./ElkConnection");
var ElkConnectionState_1 = require("./ElkConnectionState");
var WriteError_1 = require("../errors/WriteError");
var TimeoutError_1 = require("../errors/TimeoutError");
var ConnectCancelledError_1 = require("../errors/ConnectCancelledError");
var NotConnectableError_1 = require("../errors/NotConnectableError");
var withTimeout_1 = require("../withTimeout");
/**
 * A connection to an Elk M1 via a TCP socket.
 */
var ElkSocketConnection = /** @class */ (function (_super) {
    __extends(ElkSocketConnection, _super);
    function ElkSocketConnection(initialOptions) {
        if (initialOptions === void 0) { initialOptions = {}; }
        var _this = _super.call(this) || this;
        _this.initialOptions = initialOptions;
        /**
         * The most recent state of the connection.
         * Used by {@link checkForStateChange} to determine if a state change
         * event needs to be emitted.
         */
        _this._lastState = ElkConnectionState_1.default.Disconnected;
        /**
         * Called when the socket emits it's "connect" event.
         */
        _this.onSocketConnect = function () {
            _this.checkForStateChange();
        };
        /**
         * Called when the socket emits a "data" event.
         */
        _this.onSocketData = function (data) {
            _this.emit('data', data.toString());
        };
        /**
         * Called when the M1 closes the connection.
         */
        _this.onSocketEnd = function () {
            // Emitted when the other end of the socket sends a FIN packet,
            // thus ending the readable side of the socket.
            _this.checkForStateChange();
        };
        /**
         * Called when the socket is completely closed.
         */
        _this.onSocketClose = function ( /* hadError: boolean */) {
            // This is emitted right before a socket is destroyed.
            // Emitted once the socket is fully closed. The argument
            // hadError is a boolean which says if the socket was closed
            // due to a transmission error.
            _this.setSocket(undefined);
        };
        /**
         * Called when the underlying socket emits an error event.
         */
        _this.onSocketError = function (error) {
            // Emitted when an error occurs. The 'close' event will be called
            // directly following this event.
            if (_this._socket) {
                _this._socket.destroy(error);
            }
            _this.emit('error', error);
        };
        /**
         * Called when the underlying socket has no activity within the `idleTimeout`
         * time. This will cause the socket to be disconnected.
         */
        _this.onSocketTimeout = function () {
            // Emitted if the socket times out from inactivity.
            // This is only to notify that the socket has been idle.
            // The user must manually close the connection.
            // The user must manually call socket.end() or socket.destroy() to end the connection.
            if (_this._socket) {
                // TODO: call end and wait for a bit first before calling destroy?
                _this._socket.destroy(new TimeoutError_1.default(_this.options.idleTimeout));
            }
        };
        _this.options = __assign(__assign({}, (initialOptions.secure ? ElkSocketConnectionOptions_1.SECURE_DEFAULT_OPTIONS : ElkSocketConnectionOptions_1.DEFAULT_OPTIONS)), initialOptions);
        return _this;
    }
    Object.defineProperty(ElkSocketConnection.prototype, "state", {
        /**
         * The current state of the connection.
         */
        get: function () {
            if (this._socket) {
                if (this._socket.destroyed) {
                    return ElkConnectionState_1.default.Disconnected;
                }
                if (this._socket.connecting) {
                    return ElkConnectionState_1.default.Connecting;
                }
                if (this._socket.writable && this._socket.readable) {
                    return ElkConnectionState_1.default.Connected;
                }
                return ElkConnectionState_1.default.Disconnecting;
            }
            return ElkConnectionState_1.default.Disconnected;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the underlying socket being used by the connection.
     */
    ElkSocketConnection.prototype.setSocket = function (socket) {
        if (this._socket === socket) {
            // Sanity check: this really shouldn't happen.
            // If it does, there's no change so we have nothing to do.
            return;
        }
        if (this._socket) {
            // If we're replacing (or removing) an existing socket,
            // remove all of our listeners.
            this._socket.removeListener('connect', this.onSocketConnect);
            this._socket.removeListener('data', this.onSocketData);
            this._socket.removeListener('timeout', this.onSocketTimeout);
            this._socket.removeListener('error', this.onSocketError);
            this._socket.removeListener('end', this.onSocketEnd);
            this._socket.removeListener('close', this.onSocketClose);
        }
        this._socket = socket;
        // Assigning a new socket very likely changes the connection state,
        // so we may need to emit an event.
        this.checkForStateChange();
        if (this._socket) {
            // Add listeners if we've got a new socket instance.
            this._socket.on('connect', this.onSocketConnect);
            this._socket.on('data', this.onSocketData);
            this._socket.on('timeout', this.onSocketTimeout);
            this._socket.on('error', this.onSocketError);
            this._socket.on('end', this.onSocketEnd);
            this._socket.on('close', this.onSocketClose);
        }
    };
    /**
     * Checks to see if the current connection state has changed and
     * emits the appropriate event if it has.
     */
    ElkSocketConnection.prototype.checkForStateChange = function () {
        var currentState = this.state;
        if (currentState === this._lastState) {
            return;
        }
        this.emit(ElkConnection_1.STATE_CHANGE_EVENT_NAMES[currentState]);
        this._lastState = currentState;
    };
    /**
     * Attempst to connect to the Elk M1
     * This should only be called when the connection is in a disconnected state,
     * otherwise it will fail with a {@link NotConnectableError}
     * @param timeout How long to wait for a connection to be established,
     *   after which the connect() call will fail.
     * @throws {NotConnectableError} if the socket is not currently disconnected.
     */
    ElkSocketConnection.prototype.connect = function (timeout) {
        if (timeout === void 0) { timeout = this.options.connectTimeout; }
        return __awaiter(this, void 0, void 0, function () {
            var connectListener, disconnectingListener, errorListener, socket;
            var _this = this;
            return __generator(this, function (_a) {
                if (this._socket) {
                    throw new NotConnectableError_1.default(this.state, 'Must be disconnected to connect.');
                }
                return [2 /*return*/, withTimeout_1.default(timeout, new Promise(function (resolve, reject) {
                        connectListener = function () { return resolve(); };
                        disconnectingListener = function () { return reject(new ConnectCancelledError_1.default()); };
                        errorListener = function (error) { return reject(error); };
                        socket = createSocket_1.default(_this.options);
                        socket.on('connect', connectListener);
                        _this.on('error', errorListener);
                        _this.on('disconnecting', disconnectingListener);
                        _this.setSocket(socket);
                    }))
                        .catch(function (error) {
                        socket.destroy();
                        socket.removeListener('connect', connectListener);
                        _this.removeListener('error', errorListener);
                        _this.removeListener('disconnecting', disconnectingListener);
                        _this.setSocket(undefined);
                        throw error;
                    })
                        .then(function () {
                        socket.removeListener('connect', connectListener);
                        _this.removeListener('error', errorListener);
                        _this.removeListener('disconnecting', disconnectingListener);
                        return _this;
                    })];
            });
        });
    };
    /**
     * Disconnect the current socket connection.
     * @param timeout How long to wait before forcefully disconnecting.
     */
    ElkSocketConnection.prototype.disconnect = function (timeout) {
        if (timeout === void 0) { timeout = this.options.connectTimeout; }
        return __awaiter(this, void 0, void 0, function () {
            var closeListener, socket;
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, withTimeout_1.default(timeout, new Promise(function (resolve) {
                        if (!_this._socket) {
                            // Already disconnected, just resolve.
                            return resolve(_this);
                        }
                        socket = _this._socket;
                        if (_this.state === ElkConnectionState_1.default.Connecting) {
                            // If we're in the process of connecting, emit a
                            // `disconnecting` event that will cause the connect
                            // promise to be rejected.
                            _this.emit('disconnecting');
                            return resolve(_this);
                        }
                        closeListener = function () { return resolve(); };
                        socket.on('close', closeListener);
                        socket.end();
                    }))
                        .catch(function () {
                        socket.destroy();
                    })
                        .then(function () {
                        if (closeListener) {
                            socket.removeListener('close', closeListener);
                        }
                        return _this;
                    })];
            });
        });
    };
    /**
     * Sends data to the Elk M1. Typically this is an Elk Message packet
     * (but can also be arbitrary data, as is the case when authenticating).
     */
    ElkSocketConnection.prototype.write = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        if (!_this._socket) {
                            return reject(new WriteError_1.default(_this.state, 'No socket available for writing.'));
                        }
                        if (!_this._socket.writable) {
                            return reject(new WriteError_1.default(_this.state, 'Socket is not writeable'));
                        }
                        _this._socket.write(data, 'ascii', function () { return resolve(); });
                    })];
            });
        });
    };
    return ElkSocketConnection;
}(events_1.EventEmitter));
exports.default = ElkSocketConnection;
//# sourceMappingURL=ElkSocketConnection.js.map