"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var dgram_1 = require("dgram");
var events_1 = require("events");
var decode_1 = require("./decode");
var ElkDeviceType_1 = require("./ElkDeviceType");
var ElkDiscoveryOptions_1 = require("./ElkDiscoveryOptions");
exports.C1M1_DISCOVERY_ID = Buffer.from('C1M1ID', 'ascii');
exports.M1XEP_DISCOVERY_ID = Buffer.from('XEPID', 'ascii');
/**
 * A client that can be used to discover Elk M1 devices on the
 * local network using UDP broadcasts.
 */
var ElkDiscoveryClient = /** @class */ (function (_super) {
    __extends(ElkDiscoveryClient, _super);
    function ElkDiscoveryClient(initialOptions) {
        if (initialOptions === void 0) { initialOptions = {}; }
        var _this = _super.call(this) || this;
        /**
         * Starts the discovery process, resolving when complete (after the timeout),
         * or rejecting if an error occured.
         */
        _this.start = function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var _a = _this.options, broadcastAddress = _a.broadcastAddress, deviceTypes = _a.deviceTypes, port = _a.port, timeout = _a.timeout;
                        var socket = dgram_1.createSocket({ type: 'udp4', reuseAddr: true });
                        var complete = false;
                        var devices = {};
                        socket.on('message', function (msg, rinfo) {
                            // Since the discovery requests are broadcast, we actually receive them as well,
                            // so ignore those.
                            if (msg.equals(exports.C1M1_DISCOVERY_ID) || msg.equals(exports.M1XEP_DISCOVERY_ID)) {
                                return;
                            }
                            try {
                                var device = decode_1.default(msg);
                                devices[device.macAddress] = device;
                                // devices.push(device);
                                _this.emit('found', device);
                            }
                            catch (err) {
                                // Ignore unknown messages
                                _this.emit('unknownMessage', msg);
                            }
                        });
                        socket.on('close', function () {
                            if (!complete) {
                                complete = true;
                                _this.emit('complete', devices);
                                resolve(Object.values(devices));
                            }
                        });
                        socket.on('error', function (error) {
                            if (!complete) {
                                complete = true;
                                reject(error);
                            }
                            try {
                                socket.close();
                            }
                            catch (err) {
                                // Ignore this, socket was already closed.
                            }
                        });
                        socket.bind(port, function () {
                            socket.setBroadcast(true);
                            if (!deviceTypes || deviceTypes.includes(ElkDeviceType_1.default.C1M1)) {
                                socket.send(exports.C1M1_DISCOVERY_ID, 0, exports.C1M1_DISCOVERY_ID.length, port, broadcastAddress);
                            }
                            if (!deviceTypes || deviceTypes.includes(ElkDeviceType_1.default.M1XEP)) {
                                socket.send(exports.M1XEP_DISCOVERY_ID, 0, exports.M1XEP_DISCOVERY_ID.length, port, broadcastAddress);
                            }
                            setTimeout(function () {
                                socket.close();
                            }, timeout);
                        });
                    })];
            });
        }); };
        _this.options = __assign(__assign({}, ElkDiscoveryOptions_1.DEFAULT_DISCOVERY_OPTIONS), initialOptions);
        return _this;
    }
    return ElkDiscoveryClient;
}(events_1.EventEmitter));
exports.default = ElkDiscoveryClient;
//# sourceMappingURL=ElkDiscoveryClient.js.map