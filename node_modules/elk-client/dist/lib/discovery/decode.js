"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ElkDeviceType_1 = require("./ElkDeviceType");
/**
 * Extracts a MAC address from 6 bytes of a data buffer
 * @param buffer The data buffer
 * @param startIndex The index within the buffer where the MAC address is specified.
 * @param [separator=":"] The separator character to use between octets
 */
function extractMacAddress(buffer, startIndex, separator) {
    if (separator === void 0) { separator = ':'; }
    return Array.from(buffer.slice(startIndex, startIndex + 6))
        .map(function (value) { return value.toString(16).padStart(2, '0'); })
        .join(separator);
}
exports.extractMacAddress = extractMacAddress;
/**
 * Extracts an IP address from 4 bytes of a data buffer
 * @param buffer The data buffer
 * @param startIndex The index within the buffer where the IP address is specified.
 */
function extractIpAddress(buffer, startIndex) {
    return Array.from(buffer.slice(startIndex, startIndex + 4))
        .map(function (value) { return value.toString(10); })
        .join('.');
}
exports.extractIpAddress = extractIpAddress;
/**
 * Extracts a port number from 2 bytes of a data buffer
 * @param buffer The data buffer
 * @param startIndex The index within the buffer where the port is specified.
 */
function extractPort(buffer, startIndex) {
    return buffer[startIndex] * 256 + buffer[startIndex + 1];
}
exports.extractPort = extractPort;
/**
 * Decodes an `ElkDevice` configuration from a UDP discovery response.
 * @param data The UDP response data.
 */
function decode(data) {
    // In both cases, the format of the response starts with:
    //
    //   `DDDDDMMMMMMIIIIPP`
    //
    // where:
    //   * `DDDDD` - A device type identifier (either "C1M1 " or "M1XEP"
    //   * `MMMMMM` - The MAC address
    //   * `IIII` - The IP address, where each byte is one octet
    //   * `PP` - The port to use to connect to the device
    //
    // The remaining bytes vary depending on the device type
    var identifier = data.slice(0, 5).toString();
    if (identifier === 'C1M1 ') {
        return {
            deviceType: ElkDeviceType_1.default.C1M1,
            macAddress: extractMacAddress(data, 5),
            ipAddress: extractIpAddress(data, 11),
            port: extractPort(data, 15),
            // For C1M1, the next 2 bytes represent the port to use
            // for secure connections.
            securePort: extractPort(data, 17),
        };
    }
    else if (identifier === 'M1XEP') {
        return {
            deviceType: ElkDeviceType_1.default.M1XEP,
            macAddress: extractMacAddress(data, 5),
            ipAddress: extractIpAddress(data, 11),
            port: extractPort(data, 15),
            // For M1XEP, there is a customizable 16-character
            // "name" that can be used to identify the device.
            name: data.toString('ascii', 17, 17 + 16).trim(),
        };
    }
    throw new Error('Unknown response recieved with ID: ' + identifier);
}
exports.default = decode;
//# sourceMappingURL=decode.js.map