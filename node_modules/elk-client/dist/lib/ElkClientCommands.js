"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var elk_message_1 = require("elk-message");
var events_1 = require("events");
var withTimeout_1 = require("./withTimeout");
/**
 * An abstract client implementation of sending/receiving specific
 * messages from the Elk M1.
 *
 * This is just a way to declutter the client and separate out the
 * specific command implementations.
 */
var ElkClientCommands = /** @class */ (function (_super) {
    __extends(ElkClientCommands, _super);
    function ElkClientCommands() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Waits for a response that matches the predicate provided and resolves when it
     * is found, or rejects if it is not found within the timeframe.
     */
    ElkClientCommands.prototype.waitForResponse = function (predicate, timeoutMs) {
        if (timeoutMs === void 0) { timeoutMs = this.defaultTimeout; }
        return __awaiter(this, void 0, void 0, function () {
            var messageListener;
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, withTimeout_1.default(timeoutMs, new Promise(function (resolve) {
                        messageListener = function (responseToCheck) {
                            if (predicate(responseToCheck)) {
                                resolve(responseToCheck);
                            }
                        };
                        _this.on('message', messageListener);
                    }))
                        .catch(function (error) {
                        _this.removeListener('message', messageListener);
                        throw error;
                    })
                        .then(function (result) {
                        _this.removeListener('message', messageListener);
                        return result;
                    })];
            });
        });
    };
    /**
     * Waits for an "OK" response and resolves when it is found, or rejects if it is not found within the
     * timeout time.
     */
    ElkClientCommands.prototype.waitForOk = function (timeoutMs) {
        if (timeoutMs === void 0) { timeoutMs = this.defaultTimeout; }
        return __awaiter(this, void 0, void 0, function () {
            var okListener;
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, withTimeout_1.default(timeoutMs, new Promise(function (resolve) {
                        okListener = function () { return resolve(); };
                        _this.on('ok', okListener);
                    }))
                        .catch(function (error) {
                        _this.removeListener('ok', okListener);
                        throw error;
                    })
                        .then(function (result) {
                        _this.removeListener('ok', okListener);
                        return result;
                    })];
            });
        });
    };
    /**
     * Sends a command and waits for a {@link ElkResponse}
     * @param command The command to send
     * @param predicate A predicate function that is called for *every* response that
     *   is recevied and should return true when a response matches an expected
     *   response to the command that was sent.
     * @param timeout How long to wait for the response before rejecting.
     */
    ElkClientCommands.prototype.sendCommandForResponse = function (command, predicate, timeoutMs) {
        if (timeoutMs === void 0) { timeoutMs = this.defaultTimeout; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                // We want the timeout to apply to the entire operation, so the whole promise
                // chain gets wrapped in a `withTimeout` and `waitForResponse` is told not to timeout.
                // Otherwise we'd have to determine how much of our timeout we have left to wait
                // for the response after we sent the command.
                return [2 /*return*/, withTimeout_1.default(timeoutMs, this.sendCommand(command, timeoutMs).then(function () { return _this.waitForResponse(predicate, 0); }))];
            });
        });
    };
    /**
     * Helper method for sending a command and waiting for an "OK" response.
     */
    ElkClientCommands.prototype.sendCommandForOk = function (command, timeoutMs) {
        if (timeoutMs === void 0) { timeoutMs = this.defaultTimeout; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                // Same as above:
                // We want the timeout to apply to the entire operation, so the whole promise
                // chain gets wrapped in a `withTimeout` and `waitForResponse` is told not to timeout.
                // Otherwise we'd have to determine how much of our timeout we have left to wait
                // for the response after we sent the command.
                return [2 /*return*/, withTimeout_1.default(timeoutMs, this.sendCommand(command, timeoutMs).then(function () { return _this.waitForOk(0); }))];
            });
        });
    };
    /**
     * Helper method for sending a command and waiting for a response that matches the
     * type of response class given.
     *
     * Useful for commands that only need to check the type of response message, and not
     * any of it's underlying data.
     */
    ElkClientCommands.prototype.sendCommandForResponseType = function (command, ResponseClass) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(command, function (message) { return message instanceof ResponseClass; })];
            });
        });
    };
    ElkClientCommands.prototype.arm = function (areaNumber, armingLevel, userCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.Arm(armingLevel, areaNumber, userCode), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.disarm = function (areaNumber, userCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.arm(areaNumber, elk_message_1.ArmingLevel.Disarm, userCode)];
            });
        });
    };
    ElkClientCommands.prototype.getArmingStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.ArmingStatusRequest(), elk_message_1.ArmingStatusReport)];
            });
        });
    };
    ElkClientCommands.prototype.getAlarmsByZone = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.AlarmByZoneRequest(), elk_message_1.AlarmByZoneReport)];
            });
        });
    };
    ElkClientCommands.prototype.getAudioData = function (zoneNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.AudioDataRequest(zoneNumber), function (message) { return message instanceof elk_message_1.AudioDataReply && message.zone === zoneNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.setControlOutputOff = function (outputNUmber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.ControlOutputOff(outputNUmber), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.setControlOutputOn = function (outputNUmber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.ControlOutputOn(outputNUmber), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.toggleControlOutput = function (outputNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.ControlOutputToggle(outputNumber), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.getControlOutputStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.ControlOutputStatusRequest(), elk_message_1.ControlOutputStatusReport)];
            });
        });
    };
    ElkClientCommands.prototype.getCustomValue = function (valueNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.CustomValueRead(valueNumber), function (message) { return message instanceof elk_message_1.CustomValueReply && message.valueNumber === valueNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.getCustomValues = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.CustomValuesReadAll(), function (message) { return message instanceof elk_message_1.CustomValueReply && message.valueNumber === 0; })];
            });
        });
    };
    ElkClientCommands.prototype.setCustomValue = function (valueNumber, value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.CustomValueWrite(valueNumber, value), function (message) { return message instanceof elk_message_1.CustomValueReply && message.valueNumber === valueNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.changeUserCode = function (userNumber, masterOrCurrentUserCode, newUserCode, areaNumbers, changeType) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.UserCodeChangeRequest(userNumber, masterOrCurrentUserCode, newUserCode, areaNumbers, changeType), function (message) { return message instanceof elk_message_1.UserCodeChangeReply && message.userCode === userNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.getCounterValue = function (counterNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.CounterValueRead(counterNumber), function (message) { return message instanceof elk_message_1.CounterValueReply && message.counterNumber === counterNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.setCounterValue = function (counterNumber, value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.CounterValueWrite(counterNumber, value), function (message) { return message instanceof elk_message_1.CounterValueReply && message.counterNumber === counterNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.displayTextOnScreen = function (areaNumber, firstLine, secondLine, clearOption, beep, timeout) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.DisplayTextOnScreen(areaNumber, firstLine, secondLine, clearOption, beep, timeout), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.clearTextOnScreen = function (areaNumber, beep) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.displayTextOnScreen(areaNumber, null, null, elk_message_1.DisplayTextClearOption.Clear, beep)];
            });
        });
    };
    ElkClientCommands.prototype.getLightingDeviceStatus = function (lightingDeviceNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.LightingDeviceStatusRequest(lightingDeviceNumber), function (message) {
                        return message instanceof elk_message_1.LightingDeviceDataReply &&
                            message.lightingDeviceNumber === lightingDeviceNumber;
                    })];
            });
        });
    };
    ElkClientCommands.prototype.getInsteonLightingDeviceStatus = function (startingDeviceNumber, deviceCount) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.InsteonLightingDeviceStatusRequest(startingDeviceNumber, deviceCount), function (message) {
                        return message instanceof elk_message_1.InsteonLightingDeviceStatusReply &&
                            message.startingDeviceNumber === startingDeviceNumber &&
                            message.deviceCount === deviceCount;
                    })];
            });
        });
    };
    ElkClientCommands.prototype.setInsteaonLightingDevice = function (startingDeviceNumber, deviceIds) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.InsteonLightingDeviceProgramRequest(startingDeviceNumber, deviceIds), function (message) {
                        return message instanceof elk_message_1.InsteonLightingDeviceProgrammed &&
                            message.startingDeviceNumber === startingDeviceNumber &&
                            message.deviceCount === deviceIds.length;
                    })];
            });
        });
    };
    ElkClientCommands.prototype.getKeypadAreaAssignments = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.KeypadAreaAssigmentsRequest(), elk_message_1.KeypadAreaAssignments)];
            });
        });
    };
    ElkClientCommands.prototype.getKeypadFunctionKeyStatus = function (keypadNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.KeypadFunctionKeyStatusRequest(keypadNumber), function (message) { return message instanceof elk_message_1.KeypadKeyChange && message.keypadNumber === keypadNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.pressKeypadFunctionKey = function (keypadNumber, functionKey) {
        if (functionKey === void 0) { functionKey = elk_message_1.FunctionKey.None; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.KeypadFunctionKeyPressRequest(keypadNumber, functionKey), function (message) {
                        return message instanceof elk_message_1.KeypadFunctionKeyPressReply &&
                            message.keypadNumber === keypadNumber &&
                            message.functionKey === functionKey;
                    })];
            });
        });
    };
    ElkClientCommands.prototype.getSystemLogData = function (logIndex) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.SystemLogDataReadRequest(logIndex), function (message) { return message instanceof elk_message_1.SystemLogDataUpdate && message.logIndex === logIndex; })];
            });
        });
    };
    ElkClientCommands.prototype.writeSystemLogData = function (logType, eventType, zoneNumber, areaNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForOk(new elk_message_1.SystemLogDataWriteRequest(logType, eventType, zoneNumber, areaNumber))];
            });
        });
    };
    ElkClientCommands.prototype.getTemperatureData = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.TemperatureDataRequest(), elk_message_1.TemperatureData)];
            });
        });
    };
    ElkClientCommands.prototype.setPlcDevice = function (houseCode, unitCode, functionCode, extendedCode, onTime) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.PlcDeviceControl(houseCode, unitCode, functionCode, extendedCode, onTime), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.setPlcDeviceOff = function (houseCode, unitCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.PlcDeviceOff(houseCode, unitCode), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.setPlcDeviceOn = function (houseCode, unitCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.PlcDeviceOn(houseCode, unitCode), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.togglePlcDevice = function (houseCode, unitCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.PlcDeviceToggle(houseCode, unitCode), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.getPlcStatus = function (bank) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.PlcDeviceStatusRequest(bank), function (message) { return message instanceof elk_message_1.PlcDeviceStatusReply && message.bank === bank; })];
            });
        });
    };
    ElkClientCommands.prototype.getRealTimeClock = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.RealTimeClockDataRequest(), elk_message_1.RealTimeClockDataReply)];
            });
        });
    };
    ElkClientCommands.prototype.setRealTimeClock = function (year, month, day, dayOfWeek, hour, minutes, seconds) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.RealTimeClockDataWrite(year, month, day, dayOfWeek, hour, minutes, seconds), elk_message_1.RealTimeClockDataReply)];
            });
        });
    };
    ElkClientCommands.prototype.getDescription = function (textType, address) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                // The TextDescriptionType request will not always return the address requested:
                // > If the first character in a requested name is a “space” or less, then the
                // > next names are searched until a name is found whose first character is
                // > greater than “space” or the “Show On Keypad” bit is set.
                // So we just wait for ANY `TextDescriptionReply` response. This is not ideal
                // but I'm not sure what the alternative is.
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.TextDescriptionRequest(textType, address), elk_message_1.TextDescriptionReply)];
            });
        });
    };
    ElkClientCommands.prototype.getTroubleStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.SystemTroubleStatusRequest(), elk_message_1.SystemTroubleStatusReply)];
            });
        });
    };
    ElkClientCommands.prototype.getTemperature = function (deviceType, deviceNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.TemperatureRequest(deviceType, deviceNumber), function (message) {
                        return message instanceof elk_message_1.TemperatureReply &&
                            message.deviceType === deviceType &&
                            message.deviceNumber === deviceNumber;
                    })];
            });
        });
    };
    ElkClientCommands.prototype.speakWord = function (wordNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.SpeakWord(wordNumber), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.speakPhrase = function (phraseNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.SpeakPhrase(phraseNumber), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.activateTask = function (taskNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.TaskActivation(taskNumber), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.getThermostatData = function (thermostatNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ThermostatDataRequest(thermostatNumber), function (message) { return message instanceof elk_message_1.ThermostatData && message.thermostatNumber === thermostatNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.setThermostat = function (thermostatNumber, value, element) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ThermostatSet(thermostatNumber, value, element), function (message) { return message instanceof elk_message_1.ThermostatData && message.thermostatNumber === thermostatNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.setThermostatCoolSetPoint = function (thermostatNumber, temperature) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ThermostatSetCoolSetPoint(thermostatNumber, temperature), function (message) { return message instanceof elk_message_1.ThermostatData && message.thermostatNumber === thermostatNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.setThermostatHeatSetPoint = function (thermostatNumber, temperature) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ThermostatSetHeatSetPoint(thermostatNumber, temperature), function (message) { return message instanceof elk_message_1.ThermostatData && message.thermostatNumber === thermostatNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.setThermostatFan = function (thermostatNumber, on) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ThermostatSetFan(thermostatNumber, on), function (message) { return message instanceof elk_message_1.ThermostatData && message.thermostatNumber === thermostatNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.setThermostatMode = function (thermostatNumber, mode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ThermostatSetMode(thermostatNumber, mode), function (message) { return message instanceof elk_message_1.ThermostatData && message.thermostatNumber === thermostatNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.setThermostatHold = function (thermostatNumber, on) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ThermostatSetHold(thermostatNumber, on), function (message) { return message instanceof elk_message_1.ThermostatData && message.thermostatNumber === thermostatNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.getOmnistat2Data = function (onmistatData) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.Omnistat2Request(onmistatData), elk_message_1.Omnistat2Reply)];
            });
        });
    };
    ElkClientCommands.prototype.getVersionNumber = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.VersionNumberRequest(), elk_message_1.VersionNumberReply)];
            });
        });
    };
    ElkClientCommands.prototype.getValidUserCodeAreas = function (userCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.UserCodeAreasRequest(userCode), function (message) {
                        return message instanceof elk_message_1.UserCodeAreasReply && message.userCode === userCode.padStart(6, '0');
                    })];
            });
        });
    };
    ElkClientCommands.prototype.toggleBypassForZone = function (pinCode, zoneNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ZoneBypassRequest(pinCode, zoneNumber), function (message) { return message instanceof elk_message_1.ZoneBypassReply && message.zoneNumber === zoneNumber; })];
            });
        });
    };
    ElkClientCommands.prototype.toggleBypassForArea = function (pinCode, areaNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ZoneBypassRequest(pinCode, 0, areaNumber), function (message) { return message instanceof elk_message_1.ZoneBypassReply && message.zoneNumber === 0; })];
            });
        });
    };
    ElkClientCommands.prototype.getZonePartitions = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.ZonePartitionRequest(), elk_message_1.ZonePartitionReport)];
            });
        });
    };
    ElkClientCommands.prototype.getZoneStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.ZoneStatusRequest(), elk_message_1.ZoneStatusReport)];
            });
        });
    };
    ElkClientCommands.prototype.getZoneDefinitions = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponseType(new elk_message_1.ZoneDefinitionRequest(), elk_message_1.ZoneDefinitionData)];
            });
        });
    };
    ElkClientCommands.prototype.triggerZone = function (zoneNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand(new elk_message_1.ZoneTrigger(zoneNumber), this.defaultTimeout)];
            });
        });
    };
    ElkClientCommands.prototype.getZoneVoltage = function (zoneNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommandForResponse(new elk_message_1.ZoneVoltageRequest(zoneNumber), function (message) { return message instanceof elk_message_1.ZoneVoltageData && message.zoneNumber === zoneNumber; })];
            });
        });
    };
    return ElkClientCommands;
}(events_1.EventEmitter));
exports.default = ElkClientCommands;
//# sourceMappingURL=ElkClientCommands.js.map