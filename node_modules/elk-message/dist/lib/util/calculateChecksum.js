"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../messages/constants");
var numberToHex_1 = require("./numberToHex");
/**
 * Returns the two's complement of a value between 0 and 255.
 * @param value The value to calculate the two's compliment for.
 * @return The two's complement of the value.
 * @throws {RAngeError} if the value is less than 0 or greater than 255.
 */
function twosComplement(value) {
    if (value < 0 || value > 255) {
        throw new RangeError('Value must be between 0 and 255');
    }
    return (value ^ 0xff) + 1;
}
exports.twosComplement = twosComplement;
/**
 * Calculates the checksum for an elk message.
 * @see {M1-RS232-ASCII-Protocol} 4.1.6
 *
 * This is the hexadecimal twoâ€™s complement of the modulo-256 sum
 * of the ASCII values of all characters in the message excluding
 * the checksum itself and the CR-LF terminator at the end of the
 * message. Permissible characters are ASCII 0-9 and upper case A-F.
 * When all the characters are added to the Checksum, the value should equal 0.
 */
function calculateChecksum(input) {
    var inputBuffer = Buffer.from(input, 'ascii');
    // Sum all of the ASCII values.
    var sum = inputBuffer.reduce(function (accumulator, char) { return accumulator + char; }, 0);
    // Find the two's complement of the module-256 sum.
    var checksum = twosComplement(sum % 256);
    // Convert it to hex.
    return numberToHex_1.default(checksum, constants_1.CHECKSUM_WIDTH);
}
exports.default = calculateChecksum;
//# sourceMappingURL=calculateChecksum.js.map