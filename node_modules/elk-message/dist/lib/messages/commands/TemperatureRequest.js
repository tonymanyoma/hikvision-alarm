"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Request Temperature format
 *
 * This request command allows automation equipment to read
 * temperatures of the temperature probes connected to zones
 * 1 to 16, Keypad temperature from the sensor in each LCD
 * keypad, and Thermostat temperatures. Each Group can have
 * up to 16 temperature sensors.
 *
 * Version 4.2.8 and later sends automatic temperature updates
 * out Port 0 when any temperature device parameter changes.
 *
 * @see 4.31.1 Request Temperature format (st)
 */
var TemperatureRequest = /** @class */ (function (_super) {
    __extends(TemperatureRequest, _super);
    function TemperatureRequest(deviceType, deviceNumber) {
        var _this = _super.call(this, 's', 't', deviceType.toString() + deviceNumber.toString().padStart(2, '0')) || this;
        _this.deviceType = deviceType;
        _this.deviceNumber = deviceNumber;
        return _this;
    }
    return TemperatureRequest;
}(ElkCommand_1.default));
exports.default = TemperatureRequest;
//# sourceMappingURL=TemperatureRequest.js.map