"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
var FunctionKey_1 = require("../../enums/FunctionKey");
/**
 * Request Keypad Function Key Press
 *
 * This command simulates a function key being pressed on a keypad.
 * This will only be single key press even if the M1 Control is
 * programmed for double function key press. M1 Version 4.2.5 and
 * after.
 *
 * SilenceTroubleBeep (‘*’) key: M1 Version 4.2.6 and after
 * Chime (‘C’) key: M1 Version 4.3.2 and after.
 *
 * @see 4.22.1 Request Keypad Function Key Press (kf)
 */
var KeypadFunctionKeyPressRequest = /** @class */ (function (_super) {
    __extends(KeypadFunctionKeyPressRequest, _super);
    function KeypadFunctionKeyPressRequest(keypadNumber, functionKey) {
        if (functionKey === void 0) { functionKey = FunctionKey_1.default.None; }
        var _this = _super.call(this, 'k', 'f', keypadNumber.toString().padStart(2, '0') + String.fromCharCode(functionKey)) || this;
        _this.keypadNumber = keypadNumber;
        _this.functionKey = functionKey;
        return _this;
    }
    return KeypadFunctionKeyPressRequest;
}(ElkCommand_1.default));
exports.default = KeypadFunctionKeyPressRequest;
//# sourceMappingURL=KeypadFunctionKeyPressRequest.js.map