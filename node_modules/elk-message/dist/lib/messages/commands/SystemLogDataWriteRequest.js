"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Request Write Log Data
 *
 * The Write Log Data Command “le” writes log data into the
 * M1 log specifically to trigger communicator reporting to
 * the central station. A valid zone must be programmed for
 * communicator reporting. The M1 will return an “OK”crlf
 * response when the data is written to the log.
 *
 * @see 4.23.2 Request Write Log Data (le)
 */
var SystemLogDataWriteRequest = /** @class */ (function (_super) {
    __extends(SystemLogDataWriteRequest, _super);
    function SystemLogDataWriteRequest(logType, eventType, zoneNumber, areaNumber) {
        var _this = _super.call(this, 'l', 'e', logType.toString().padStart(3, '0') +
            eventType
                .toString()
                .padStart(4, '0')
                .substr(-3) +
            zoneNumber.toString().padStart(3, '0') +
            areaNumber.toString()) || this;
        _this.logType = logType;
        _this.eventType = eventType;
        _this.zoneNumber = zoneNumber;
        _this.areaNumber = areaNumber;
        return _this;
    }
    return SystemLogDataWriteRequest;
}(ElkCommand_1.default));
exports.default = SystemLogDataWriteRequest;
//# sourceMappingURL=SystemLogDataWriteRequest.js.map