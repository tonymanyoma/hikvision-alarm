"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
var DisplayTextClearOption_1 = require("../../enums/DisplayTextClearOption");
function encodeLineData(input) {
    // If there is no data, return the terminator and pad with dummy character.
    if (!input || !input.length) {
        return '^'.padEnd(16, 'x');
    }
    // If the input is less then the allowed length, add the terminator character
    // and pad with dummy characters.
    if (input.length < 16) {
        return (input + '^').padEnd(16, 'x');
    }
    // Otherwise, make sure the input is limited to 16 characters.
    return input.substr(0, 16);
}
exports.encodeLineData = encodeLineData;
/**
 * Display Text On LCD Screen of keypads
 *
 * This is a M1 received message to display ascii text on the bottom line
 * of the LCD display on the keypads in the area specified. Enter the line
 * terminator, “^”, as the ending character of the line display if less
 * than 16 characters are to be displayed. The message line, L1 or L2,
 * will need dummy characters to fill the rest of the line for 16
 * characters each line.
 *
 * @see 4.13 Display Text On LCD Screen (dm)
 */
var DisplayTextOnScreen = /** @class */ (function (_super) {
    __extends(DisplayTextOnScreen, _super);
    function DisplayTextOnScreen(areaNumber, firstLine, secondLine, clearOption, beep, timeout) {
        if (firstLine === void 0) { firstLine = ''; }
        if (secondLine === void 0) { secondLine = ''; }
        if (clearOption === void 0) { clearOption = !firstLine
            ? DisplayTextClearOption_1.default.Clear
            : DisplayTextClearOption_1.default.ClearWithStarKey; }
        if (beep === void 0) { beep = true; }
        if (timeout === void 0) { timeout = 0; }
        var _this = _super.call(this, 'd', 'm', areaNumber.toString() +
            clearOption.toString() +
            (beep ? '1' : '0') +
            (timeout || 0).toString().padStart(5, '0') +
            encodeLineData(firstLine) +
            encodeLineData(secondLine)) || this;
        _this.areaNumber = areaNumber;
        _this.firstLine = firstLine;
        _this.secondLine = secondLine;
        _this.clearOption = clearOption;
        _this.beep = beep;
        _this.timeout = timeout;
        return _this;
    }
    return DisplayTextOnScreen;
}(ElkCommand_1.default));
exports.default = DisplayTextOnScreen;
//# sourceMappingURL=DisplayTextOnScreen.js.map