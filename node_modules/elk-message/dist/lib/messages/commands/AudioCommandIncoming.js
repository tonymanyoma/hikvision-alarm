"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Incoming Audio Command
 *
 * An M1XEP Ethernet Module is required to intercept the “cd” command.
 * These commands are sent into the M1XEP via the Ethernet connection
 * and passed through to the M1. The M1XEP builds custom audio commands
 * to control the audio equipment and sends these commands to the audio
 * equipment via ethernet. An IP232 Ethernet Module may be required at
 * the audio equipment to received the commands if no Ethernet Port is
 * available on the audio equipment. The incoming “cd” command can
 * trigger Rules in the M1 which can fire outgoing audio equipment
 * “CD” commands or other control Rules. ELKRP downloads the Audio
 * Equipment Command tables into the M1XEP according to the Audio
 * Equipment Manufacturer. M1 version 4.1.11, 5.1.11 or later is required.
 *
 * @see 4.8.1 Incoming Audio Command (cd)
 */
var AudioCommandIncoming = /** @class */ (function (_super) {
    __extends(AudioCommandIncoming, _super);
    function AudioCommandIncoming(audioCommand, audioSource, audioZone, value) {
        if (value === void 0) { value = 0; }
        var _this = _super.call(this, 'c', 'd', audioCommand.toString().padStart(2, '0') +
            audioSource.toString().padStart(2, '0') +
            audioZone.toString().padStart(2, '0') +
            value.toString().padStart(3, '0')) || this;
        _this.audioCommand = audioCommand;
        _this.audioSource = audioSource;
        _this.audioZone = audioZone;
        _this.value = value;
        return _this;
    }
    return AudioCommandIncoming;
}(ElkCommand_1.default));
exports.default = AudioCommandIncoming;
//# sourceMappingURL=AudioCommandIncoming.js.map