"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Request ASCII String Text Descriptions
 *
 * This request command allows automation equipment to read
 * the text descriptions that are stored in the control.
 *
 * The control will response with a {@link TextDescriptionResponse}.
 *
 * NOTE! The {@link TextDescriptionResponse} may not be for the
 * `address` requested! If there is no description for the requested
 * address the next addresses will be searched until one with a
 * description is found (or, if none are found, an address of `0` will
 * be returned).
 *
 * From the protocol specification:
 * > If the first character in a requested name is a “space” or less,
 * > then the next names are searched until a name is found whose first
 * > character is greater than “space” or the “Show On Keypad” bit is
 * > set. If no valid names are found, a “000” for the NNN address is
 * > returned. This speeds up the loading of names so that invalid
 * > names are not returned. M1 version 2.4.6 or later.
 *
 * @see 4.29.1 Request ASCII String Text Descriptions (sd)
 */
var TextDescriptionRequest = /** @class */ (function (_super) {
    __extends(TextDescriptionRequest, _super);
    function TextDescriptionRequest(textType, address) {
        var _this = _super.call(this, 's', 'd', textType.toString().padStart(2, '0') + address.toString().padStart(3, '0')) || this;
        _this.textType = textType;
        _this.address = address;
        return _this;
    }
    return TextDescriptionRequest;
}(ElkCommand_1.default));
exports.default = TextDescriptionRequest;
//# sourceMappingURL=TextDescriptionRequest.js.map