"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Zone Trigger
 *
 * This command allows a 3rd party integration device to trigger
 * an alarm condition on a EOL hardwired zone defined with any
 * of the Burglary zone types and many other zone types up to
 * zone type 26. This command creates a virtual momentary open
 * condition on the zone as if the EOL hardwired loop had been
 * physically opened. This requires M1 Version 4.5.23, 5.1.23
 * or later. Caution: This command cannot create a virtual short
 * condition and therefore cannot trigger an alarm condition for
 * zone types that require a short. i.e. Fire zone alarms cannot
 * be triggered.
 *
 * @see 4.42.1 Zone Trigger (zt)
 */
var ZoneTrigger = /** @class */ (function (_super) {
    __extends(ZoneTrigger, _super);
    function ZoneTrigger(zoneNumber) {
        var _this = _super.call(this, 'z', 't', zoneNumber.toString().padStart(3, '0')) || this;
        _this.zoneNumber = zoneNumber;
        return _this;
    }
    return ZoneTrigger;
}(ElkCommand_1.default));
exports.default = ZoneTrigger;
//# sourceMappingURL=ZoneTrigger.js.map