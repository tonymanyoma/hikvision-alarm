"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Request Read Of Insteon Lighting Device Data
 *
 * This command allows the M1 to poll single light devices to obtain
 * their on, off, dim status. This will be an automatic command issued
 * from the M1 to the M1XSP Type modules that connect to lighting devices.
 * Note: Only single light devices can be polled for status. Groups and
 * scenes will not return valid data. Enable the “2 Way” Poll setting for
 * the device to be polled. M1 Version 4.3.9 and after. This command
 * cannot be used by automation equipment.
 *
 * @see 4.19.3 Request Read Of Insteon Lighting Device Data (ir)
 */
var InsteonLightingDeviceStatusRequest = /** @class */ (function (_super) {
    __extends(InsteonLightingDeviceStatusRequest, _super);
    function InsteonLightingDeviceStatusRequest(startingDeviceNumber, deviceCount) {
        var _this = _super.call(this, 'i', 'r', startingDeviceNumber.toString().padStart(3, '0') + deviceCount.toString()) || this;
        _this.startingDeviceNumber = startingDeviceNumber;
        _this.deviceCount = deviceCount;
        return _this;
    }
    return InsteonLightingDeviceStatusRequest;
}(ElkCommand_1.default));
exports.default = InsteonLightingDeviceStatusRequest;
//# sourceMappingURL=InsteonLightingDeviceStatusRequest.js.map