"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Arm or disarm an area.
 *
 * Note: Arming the control panel with zones open
 * will initiate “force arming” regardless of whether
 * force arming is enabled or disabled in the control panel.
 *
 * @see 4.2 Arm and Disarm Messages (a0..a8)
 */
var Arm = /** @class */ (function (_super) {
    __extends(Arm, _super);
    /**
     * @param armingLevel The arming level desired
     * @param areaNumber The area to be armed or disarmed
     * @param userCode The user code (a string of 4 or 6 digits)
     */
    function Arm(armingLevel, areaNumber, userCode) {
        var _this = _super.call(this, 'a', String.fromCharCode(armingLevel), areaNumber + userCode.padStart(6, '0')) || this;
        _this.armingLevel = armingLevel;
        _this.areaNumber = areaNumber;
        _this.userCode = userCode;
        return _this;
    }
    return Arm;
}(ElkCommand_1.default));
exports.default = Arm;
//# sourceMappingURL=Arm.js.map