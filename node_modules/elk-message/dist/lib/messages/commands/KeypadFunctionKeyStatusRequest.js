"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Request Keypad Function Key Illumination Status
 *
 * The function key illumination request returns the Keypad KeyChange
 * Update (KC) data with the Key Number set to zero (0). This command
 * allows automation equipment to request the illumination status of
 * the keypad function keys for building virtual keypads on a PC.
 *
 * @see 4.21.1 Request Keypad Function Key Illumination Status (kc)
 */
var KeypadFunctionKeyStatusRequest = /** @class */ (function (_super) {
    __extends(KeypadFunctionKeyStatusRequest, _super);
    function KeypadFunctionKeyStatusRequest(keypadNumber) {
        var _this = _super.call(this, 'k', 'c', keypadNumber.toString().padStart(2, '0')) || this;
        _this.keypadNumber = keypadNumber;
        return _this;
    }
    return KeypadFunctionKeyStatusRequest;
}(ElkCommand_1.default));
exports.default = KeypadFunctionKeyStatusRequest;
//# sourceMappingURL=KeypadFunctionKeyStatusRequest.js.map