"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Zone Bypass Request
 *
 * This command allows for bypassing/unbypassing a zone.
 * Zone = 000 will unbypass all burglar zones in the.
 * Zone = 999 will bypass all violated burglar zones.
 * Area to bypass/unbypass is required if Zone equals
 * 000 or 999 otherwise it is ignored.
 *
 * @see 4.40.1 Zone Bypass Request (zb)
 */
var ZoneBypassRequest = /** @class */ (function (_super) {
    __extends(ZoneBypassRequest, _super);
    function ZoneBypassRequest(pinCode, zoneNumber, areaNumber) {
        if (areaNumber === void 0) { areaNumber = 0; }
        var _this = _super.call(this, 'z', 'b', zoneNumber.toString().padStart(3, '0') + areaNumber.toString() + pinCode.padStart(6, '0')) || this;
        _this.pinCode = pinCode;
        _this.zoneNumber = zoneNumber;
        _this.areaNumber = areaNumber;
        return _this;
    }
    return ZoneBypassRequest;
}(ElkCommand_1.default));
exports.default = ZoneBypassRequest;
//# sourceMappingURL=ZoneBypassRequest.js.map