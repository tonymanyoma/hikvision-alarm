"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkCommand_1 = require("./ElkCommand");
/**
 * Request Valid User Code Areas
 *
 * This request command allows automation equipment to send a
 * user code to the control and have returned what areas the
 * code is valid in. The returned value is an 8 bit masked value
 * with bit 0 corresponding to area 1, up to bit 7 corresponding
 * to area 8. If the returned value is 0, then the code is not valid
 * in any area. M1 Version 4.2.5 , type of code is in Version 4.3.6
 * and after.
 *
 * @see 4.37.1 Request Valid User Code Areas (ua)
 */
var UserCodeAreasRequest = /** @class */ (function (_super) {
    __extends(UserCodeAreasRequest, _super);
    function UserCodeAreasRequest(userCode) {
        var _this = _super.call(this, 'u', 'a', userCode.padStart(6, '0')) || this;
        _this.userCode = userCode;
        return _this;
    }
    return UserCodeAreasRequest;
}(ElkCommand_1.default));
exports.default = UserCodeAreasRequest;
//# sourceMappingURL=UserCodeAreasRequest.js.map