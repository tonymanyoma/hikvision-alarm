"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * ELKRP software Connected
 *
 * The M1XEP sends the following ASCII command out to
 * all socket connected devices when ELK RP,
 * Upload/Download Software, disconnects from the M1
 *
 * @see 4.27 ELKRP Connected (RP)
 */
var ElkRPConnected = /** @class */ (function (_super) {
    __extends(ElkRPConnected, _super);
    function ElkRPConnected(raw) {
        var _this = _super.call(this, raw) || this;
        _this.connectMessageType = _this.data[1];
        return _this;
    }
    Object.defineProperty(ElkRPConnected.prototype, "isDisconnectBroadcast", {
        get: function () {
            return this.connectMessageType === '0';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElkRPConnected.prototype, "isPollReply", {
        get: function () {
            return this.connectMessageType === '1';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ElkRPConnected.prototype, "isInitializing", {
        get: function () {
            return this.connectMessageType === '2';
        },
        enumerable: true,
        configurable: true
    });
    ElkRPConnected.COMMAND = 'RP';
    return ElkRPConnected;
}(ElkResponse_1.default));
exports.default = ElkRPConnected;
//# sourceMappingURL=ElkRPConnected.js.map