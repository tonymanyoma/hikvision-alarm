"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * This message is used to inform User Interfaces that an alarm
 * memory is present and must be cleared before an arm command will arm the system.
 *
 * @see 4.38 Alarm Memory Update (AM)
 */
var AlarmMemoryUpdate = /** @class */ (function (_super) {
    __extends(AlarmMemoryUpdate, _super);
    function AlarmMemoryUpdate(raw) {
        var _this = _super.call(this, raw) || this;
        // The alarm memory response uses the reserved characters as
        // part of it's data (or depending on how you look at it,
        // doesn't *have* the reserved characters.
        var data = _this.data + _this.reserved;
        _this.areas = Array.from(data.substr(0, 8)).map(function (char) { return char === '1'; });
        return _this;
    }
    /**
     * Returns a value indicating whether there is an alarm memory
     * present in the given area.
     * @param areaNumber The area number (1..8)
     */
    AlarmMemoryUpdate.prototype.isAlarmMemoryPresent = function (areaNumber) {
        return this.areas[areaNumber - 1];
    };
    AlarmMemoryUpdate.COMMAND = 'AM';
    return AlarmMemoryUpdate;
}(ElkResponse_1.default));
exports.default = AlarmMemoryUpdate;
//# sourceMappingURL=AlarmMemoryUpdate.js.map