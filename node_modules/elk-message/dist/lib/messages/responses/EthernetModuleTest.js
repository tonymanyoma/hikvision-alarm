"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * Ethernet Module Test
 *
 * The “XK” command is automatically sent every 30 seconds. This is
 * done regardless of whether an M1XEP Ethernet Module is present or
 * not. The XK command serves two purposes.
 *  1) It tests to see if a M1XEP Ethernet Module is connected to
 *     the Control.
 *  2) It includes the Control’s real time clock information (current
 *     Date and Time) for general purpose use, including but not limited
 *     to clock synchronization by a third party device.
 *
 * The expected response from a connected M1XEP Ethernet Module is “xk”.
 * However, the Control does not actually care or keep track of a missing
 * “xk” response UNLESS or UNTIL after a M1XEP Ethernet Module has been
 * properly enrolled with the Control. This can be accomplished via the
 * Bus Module Enrollment process (Keypad programming Menu 1) or by the RP
 * software). Once an M1XEP has been enrolled, the Control will now begin
 * tracking each response to an “XK” command, and it will display and log
 * an “Ethernet Trouble” message if an “xk” response is not received
 * within 120 seconds of the “XK” command. This response scenario is also
 * true for alarm reporting commands “AT” and “AR”. Basically, the M1XEP
 * will withhold sending the “xk” response if it should fail to complete
 * an alarm or restoral transmission after 2 attempts. This allows for
 * 1 transmission miss.
 *
 * NOTE: Control Firmware Version 4.32 and after includes the M1’s real
 * time clock information.
 *
 * @see 4.4.5 Ethernet Module Test (XK)
 */
var EthernetModuleTest = /** @class */ (function (_super) {
    __extends(EthernetModuleTest, _super);
    function EthernetModuleTest(raw) {
        var _this = _super.call(this, raw) || this;
        _this.seconds = parseInt(_this.data.substr(0, 2), 10);
        _this.minutes = parseInt(_this.data.substr(2, 2), 10);
        _this.hour = parseInt(_this.data.substr(4, 2), 10);
        _this.dayOfWeek = parseInt(_this.data.substr(6, 1), 10);
        _this.dayOfMonth = parseInt(_this.data.substr(7, 2), 10);
        _this.monthOfYear = parseInt(_this.data.substr(9, 2), 10);
        _this.year = 2000 + parseInt(_this.data.substr(11, 2), 10);
        _this.isDst = _this.data.substr(13, 1) === '1';
        _this.is12hourClockMode = _this.data.substr(14, 1) === '1';
        _this.isDateModeDayFirst = _this.data.substr(15, 1) === '1';
        // TODO: What to do with this? I'm not sure we have any way of
        // know which timezone we're dealing with. And it's not UTC.
        _this.date = new Date(Date.UTC(_this.year, _this.monthOfYear - 1, // JavaScript uses 0-based months.
        _this.dayOfMonth, _this.hour, _this.minutes, _this.seconds));
        return _this;
    }
    EthernetModuleTest.COMMAND = 'XK';
    return EthernetModuleTest;
}(ElkResponse_1.default));
exports.default = EthernetModuleTest;
//# sourceMappingURL=EthernetModuleTest.js.map