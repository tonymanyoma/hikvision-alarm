"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * Reply With ASCII String Text Descriptions
 *
 * Sent as a response to {@link TextDescriptionRequest}
 *
 * @see 4.29.2 Reply With ASCII String Text Descriptions (SD)
 */
var TextDescriptionReply = /** @class */ (function (_super) {
    __extends(TextDescriptionReply, _super);
    function TextDescriptionReply(raw) {
        var _this = _super.call(this, raw) || this;
        _this.textType = parseInt(_this.data.substr(0, 2), 10);
        _this.address = parseInt(_this.data.substr(2, 3), 10);
        _this.text = _this.data.substr(5, 16).trim();
        if (_this.text.charCodeAt(0) > 127) {
            // Note: The high bit of the first character in the text string may be set as the
            // “Show On Keypad” bit. Mask out the high bit for proper ASCII display.
            _this.text = String.fromCharCode(_this.text.charCodeAt(0) - 128) + _this.text.substr(1);
        }
        return _this;
    }
    TextDescriptionReply.COMMAND = 'SD';
    return TextDescriptionReply;
}(ElkResponse_1.default));
exports.default = TextDescriptionReply;
//# sourceMappingURL=TextDescriptionReply.js.map