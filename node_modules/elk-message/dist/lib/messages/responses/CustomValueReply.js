"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
var enums_1 = require("../../enums");
var CustomTimeOfDayValue_1 = require("../../models/CustomTimeOfDayValue");
var CustomNumberValue_1 = require("../../models/CustomNumberValue");
var SPLIT_ALL_REGEX = /.{1,6}/g;
/**
 * Reply With Custom Value
 *
 * Sent in response to a {@link CustomValueRead}
 * or {@link CustomValuesReadAll}
 *
 * @see 4.10.3 Reply With Custom Value (CR)
 */
var CustomValueReply = /** @class */ (function (_super) {
    __extends(CustomValueReply, _super);
    function CustomValueReply(raw) {
        var _this = _super.call(this, raw) || this;
        _this.valueNumber = parseInt(_this.data.substr(0, 2), 10);
        if (_this.valueNumber === 0) {
            // ALL values were returned.
            var matches = _this.data.substr(2).match(SPLIT_ALL_REGEX);
            _this.values = matches
                ? matches.map(function (chunk, index) { return CustomValueReply.decodeCustomValue(chunk.substr(0, 6)); })
                : [];
        }
        else {
            _this.values = [CustomValueReply.decodeCustomValue(_this.data.substr(2, 6))];
        }
        return _this;
    }
    CustomValueReply.decodeCustomValue = function (input) {
        var value = input.substr(0, 5);
        var format = parseInt(input.substr(5, 1), 10);
        return format === enums_1.CustomValueFormat.TimeOfDay
            ? CustomTimeOfDayValue_1.default.decode(value)
            : CustomNumberValue_1.default.decode(value, format);
    };
    CustomValueReply.prototype.getCustomValue = function (valueNumber) {
        if (valueNumber === void 0) { valueNumber = 1; }
        return this.values[valueNumber - 1];
    };
    CustomValueReply.COMMAND = 'CR';
    return CustomValueReply;
}(ElkResponse_1.default));
exports.default = CustomValueReply;
//# sourceMappingURL=CustomValueReply.js.map