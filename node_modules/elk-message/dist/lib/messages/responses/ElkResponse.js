"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var calculateChecksum_1 = require("../../util/calculateChecksum");
var numberToHex_1 = require("../../util/numberToHex");
/**
 * A regex expression that parses a raw message packet and captures:
 * 1. Packet length
 * 2. Message type
 * 3. Sub-message type
 * 4. Data
 * 5. Reserved
 * 6. Checksum
 * 7. Terminator
 */
var PACKET_REGEX = new RegExp("^(\\S{" + constants_1.PACKET_LENGTH_WIDTH + "})(\\S)(\\S)(.*)(\\S{" + constants_1.RESERVED_WIDTH + "})(\\S{" + constants_1.CHECKSUM_WIDTH + "})(" + constants_1.TERMINATOR + "|" + constants_1.TERMINATOR[0] + "|" + constants_1.TERMINATOR[1] + ")$");
/**
 * A message that is received from the Elk M1
 */
var ElkResponse = /** @class */ (function () {
    function ElkResponse(raw) {
        this.raw = raw;
        this.isWellFormed = false;
        this.isChecksumValid = false;
        this.isPacketLengthValid = false;
        this.data = '';
        var result = PACKET_REGEX.exec(raw);
        this.isWellFormed = !!result;
        if (result) {
            this.packetLength = result[1];
            this.messageType = result[2];
            this.subMessageType = result[3];
            this.data = result[4];
            this.reserved = result[5];
            this.checksum = result[6];
            this.terminator = result[7];
            this.expectedPacketLength = numberToHex_1.default(raw.length - constants_1.PACKET_LENGTH_WIDTH - this.terminator.length, constants_1.PACKET_LENGTH_WIDTH);
            this.expectedChecksum = calculateChecksum_1.default(raw.substring(0, raw.length - constants_1.CHECKSUM_WIDTH - this.terminator.length));
            this.isChecksumValid = this.checksum === this.expectedChecksum;
            this.isPacketLengthValid = this.packetLength === this.expectedPacketLength;
        }
    }
    Object.defineProperty(ElkResponse.prototype, "command", {
        get: function () {
            if (!this.messageType || !this.subMessageType) {
                return null;
            }
            return this.messageType[0] + this.subMessageType[0];
        },
        enumerable: true,
        configurable: true
    });
    return ElkResponse;
}());
exports.default = ElkResponse;
//# sourceMappingURL=ElkResponse.js.map