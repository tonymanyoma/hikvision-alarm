"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
var ArmUpState_1 = require("../../enums/ArmUpState");
var AlarmState_1 = require("../../enums/AlarmState");
var AreaArmingStatus_1 = require("../../models/AreaArmingStatus");
/**
 * A response from the Elk M1 that reports the arming status for all areas.
 *
 * If the control’s area status changes, this message will be sent if
 * Global Option “Transmit Keypad Keys” is enabled.
 *
 * May be requested by sending a {@link ArmingStatusRequest}
 *
 * @see 4.2.13 Reply Arming Status Report Data (AS)
 */
var ArmingStatusReport = /** @class */ (function (_super) {
    __extends(ArmingStatusReport, _super);
    function ArmingStatusReport(raw) {
        var _this = _super.call(this, raw) || this;
        var armingLevels = Array.from(_this.data.substr(0, 8)).map(function (char) { return char.charCodeAt(0); });
        var armUpStates = Array.from(_this.data.substr(8, 8)).map(function (char) { return char.charCodeAt(0); });
        var alarmStates = Array.from(_this.data.substr(16, 8)).map(function (char) { return char.charCodeAt(0); });
        _this.areas = [1, 2, 3, 4, 5, 6, 7, 8].map(function (areaNumber, index) {
            return new AreaArmingStatus_1.default(areaNumber, armingLevels[index], armUpStates[index], alarmStates[index]);
        });
        return _this;
    }
    /**
     * Gets the arming status for an area
     * @param areaNumber The area number (1..8)
     */
    ArmingStatusReport.prototype.getAreaStatus = function (areaNumber) {
        return this.areas[areaNumber - 1];
    };
    Object.defineProperty(ArmingStatusReport.prototype, "exitTime", {
        /**
         * If any area has an {@link AreaArmingStatus.armUpState} of
         * {@link ArmUpState.ArmedTimer}, this will return the
         * exit time in seconds; Othwerise, this returns `null`
         */
        get: function () {
            if (this.reserved &&
                this.areas.find(function (areaStatus) { return areaStatus.armUpState === ArmUpState_1.default.ArmedTimer; })) {
                return parseInt(this.reserved, 10);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArmingStatusReport.prototype, "entranceTime", {
        /**
         * If any area has an {@link AreaArmingStatus.alarmState} of
         * {@link AlarmState.EntranceDelayActive} and no areas have an
         * {@link AreaArmingStatus.armUpState} of {@link ArmUpState.ArmedTimer},
         * this will return the entrance time in seconds; Othwerise, this
         * returns `null`.
         */
        get: function () {
            if (this.reserved &&
                this.exitTime === null &&
                this.areas.find(function (areaStatus) { return areaStatus.alarmState === AlarmState_1.default.EntranceDelayActive; })) {
                return parseInt(this.reserved, 10);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    ArmingStatusReport.COMMAND = 'AS';
    return ArmingStatusReport;
}(ElkResponse_1.default));
exports.default = ArmingStatusReport;
//# sourceMappingURL=ArmingStatusReport.js.map