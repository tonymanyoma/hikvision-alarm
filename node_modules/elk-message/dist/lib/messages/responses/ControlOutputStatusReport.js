"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * Control Output Status Report
 *
 * The control panel sends this message in response
 * to a {@link ControlOutputStatusRequest}. The data portion
 * of this message is 208 characters long, one character
 * for each output in order. The value will be: 0 (Off), 1 (On).
 *
 * @see 4.9.4 Control Output Status Report (CS)
 */
var ControlOutputStatusReport = /** @class */ (function (_super) {
    __extends(ControlOutputStatusReport, _super);
    function ControlOutputStatusReport(raw) {
        var _this = _super.call(this, raw) || this;
        _this.outputStatuses = Array.from(_this.data).map(function (char) { return char === '1'; });
        return _this;
    }
    ControlOutputStatusReport.prototype.isOutputOn = function (outputNumber) {
        return this.outputStatuses[outputNumber - 1];
    };
    ControlOutputStatusReport.COMMAND = 'CS';
    return ControlOutputStatusReport;
}(ElkResponse_1.default));
exports.default = ControlOutputStatusReport;
//# sourceMappingURL=ControlOutputStatusReport.js.map