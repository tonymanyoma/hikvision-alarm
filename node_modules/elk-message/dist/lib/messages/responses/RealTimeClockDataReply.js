"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * Reply Real Time Clock Data
 *
 * @see 4.28.2 Reply Real Time Clock Data (RR)
 */
var RealTimeClockDataReply = /** @class */ (function (_super) {
    __extends(RealTimeClockDataReply, _super);
    function RealTimeClockDataReply(raw) {
        var _this = _super.call(this, raw) || this;
        _this.seconds = parseInt(_this.data.substr(0, 2), 10);
        _this.minutes = parseInt(_this.data.substr(2, 2), 10);
        _this.hour = parseInt(_this.data.substr(4, 2), 10);
        _this.dayOfWeek = parseInt(_this.data.substr(6, 1), 10);
        _this.dayOfMonth = parseInt(_this.data.substr(7, 2), 10);
        _this.monthOfYear = parseInt(_this.data.substr(9, 2), 10);
        _this.year = 2000 + parseInt(_this.data.substr(11, 2), 10);
        _this.isDst = _this.data.substr(13, 1) === '1';
        _this.is12hourClockMode = _this.data.substr(14, 1) === '1';
        _this.isDateModeDayFirst = _this.data.substr(15, 1) === '1';
        // TODO: What to do with this? I'm not sure we have any way of
        // know which timezone we're dealing with. And it's not UTC.
        _this.date = new Date(Date.UTC(_this.year, _this.monthOfYear - 1, // JavaScript uses 0-based months.
        _this.dayOfMonth, _this.hour, _this.minutes, _this.seconds));
        return _this;
    }
    RealTimeClockDataReply.COMMAND = 'RR';
    return RealTimeClockDataReply;
}(ElkResponse_1.default));
exports.default = RealTimeClockDataReply;
//# sourceMappingURL=RealTimeClockDataReply.js.map