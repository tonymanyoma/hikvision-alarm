"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * Send ASCII String To IP Address
 *
 * It is recommended this response NOT be used.
 *
 * The documentation on this particular "command" is very confusing.
 * Upper-cased commands are supposed to be responses from the M1,
 * but the documentation for this reads as those it's a command that
 * can be sent TO the panel. The example include message packets
 * which aren't even valid (they don't have checksums, the reserved
 * values, and the terminator).
 *
 * So I'm not entirely sure how this is supposed to be implemented.
 * For now it does some minimal parsing as a response message.
 *
 * TODO: Implement correctly?
 *
 * @see 4.3 Send ASCII String To IP Address (AP)
 */
var SendASCIIStringToIPAddress = /** @class */ (function (_super) {
    __extends(SendASCIIStringToIPAddress, _super);
    function SendASCIIStringToIPAddress(raw) {
        var _this = _super.call(this, raw) || this;
        _this.ipAddressNumber = parseInt(_this.data.substr(0, 1), 10);
        _this.textData = _this.data.substr(1);
        return _this;
    }
    SendASCIIStringToIPAddress.COMMAND = 'AP';
    return SendASCIIStringToIPAddress;
}(ElkResponse_1.default));
exports.default = SendASCIIStringToIPAddress;
//# sourceMappingURL=SendASCIIStringToIPAddress.js.map