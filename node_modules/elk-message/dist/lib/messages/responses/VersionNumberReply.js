"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
function versionsToString(major, minor, patch) {
    return major.toString().padStart(2, '0') + "." + minor
        .toString()
        .padStart(2, '0') + "." + patch.toString().padStart(2, '0');
}
/**
 * Reply M1 Version Number
 *
 * Response to {@link VersionNumberRequest}
 *
 * @see 4.36.2 Reply M1 Version Number (VN)
 */
var VersionNumberReply = /** @class */ (function (_super) {
    __extends(VersionNumberReply, _super);
    function VersionNumberReply(raw) {
        var _this = _super.call(this, raw) || this;
        _this.m1Major = parseInt(_this.data.substr(0, 2), 16);
        _this.m1Minor = parseInt(_this.data.substr(2, 2), 16);
        _this.m1Patch = parseInt(_this.data.substr(4, 2), 16);
        _this.m1xepMajor = parseInt(_this.data.substr(6, 2), 16);
        _this.m1xepMinor = parseInt(_this.data.substr(8, 2), 16);
        _this.m1xepPatch = parseInt(_this.data.substr(10, 2), 16);
        return _this;
    }
    Object.defineProperty(VersionNumberReply.prototype, "m1Version", {
        get: function () {
            return versionsToString(this.m1Major, this.m1Minor, this.m1Patch);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionNumberReply.prototype, "m1XepVersion", {
        get: function () {
            return versionsToString(this.m1xepMajor, this.m1xepMinor, this.m1xepPatch);
        },
        enumerable: true,
        configurable: true
    });
    VersionNumberReply.COMMAND = 'VN';
    return VersionNumberReply;
}(ElkResponse_1.default));
exports.default = VersionNumberReply;
//# sourceMappingURL=VersionNumberReply.js.map