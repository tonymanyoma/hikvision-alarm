"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * Send Entry/Exit Data
 *
 * This sends the entry 1 & 2 and exit 1 & 2 time data when the timers
 * start by area. When each exit timer expires an “EE” command is also
 * transmitted.
 * M1 Version 4.1.12, 5.1.12 or later.
 * Armed State available in 4.1.18, 5.1.18 or later.
 *
 * @see 4.15.1 Send Entry/Exit Data (EE)
 */
var ExntryExitTimer = /** @class */ (function (_super) {
    __extends(ExntryExitTimer, _super);
    function ExntryExitTimer(raw) {
        var _this = _super.call(this, raw) || this;
        _this.areaNumber = parseInt(_this.data.substr(0, 1), 10);
        _this.isEntry = _this.data.substr(1, 1) === '1';
        _this.timer1 = parseInt(_this.data.substr(2, 3), 10);
        _this.timer2 = parseInt(_this.data.substr(5, 3), 10);
        _this.armingLevel = _this.data.charCodeAt(8);
        return _this;
    }
    Object.defineProperty(ExntryExitTimer.prototype, "isExit", {
        get: function () {
            return !this.isEntry;
        },
        enumerable: true,
        configurable: true
    });
    ExntryExitTimer.COMMAND = 'EE';
    return ExntryExitTimer;
}(ElkResponse_1.default));
exports.default = ExntryExitTimer;
//# sourceMappingURL=EntryExitTimer.js.map