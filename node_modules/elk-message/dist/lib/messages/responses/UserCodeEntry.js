"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
var UserCode_1 = require("../../models/UserCode");
/**
 * Send Valid User Number And Invalid User Code
 *
 * This ASCII Data Packet will be sent when a user code is entered
 * and a valid code is found. Only the valid user code number will be
 * returned. If a user code is not found in the M1’s User Code Data
 * Base, the code that was enter will be sent. If the User Code
 * Length is set to 4 digits, the invalid data packet will be sent
 * after 4 digits are entered, then repeated for each additional
 * invalid user code digit. If the User Code Length is set to 6
 * digits, the invalid data packet will be sent after 6 digits
 * are entered, then repeated for each additional invalid user
 * digit. If prox card data is enter, the packet will be sent
 * immediately. This data can be used by automation equipment
 * with its own user code data base. The automation equipment
 * would sent the appropriate arm/disarm command (“a0” to “a6”)
 * or output relay control commands (“cn”, “cf”, or “ct”) back
 * to the M1 after it has verified the proper code is in its data
 * base. Modified for 26 bit Weigand data cards and available in
 * M1 Version 4.2.8 and after.
 *
 * @see 4.17 Send Valid User Number And Invalid User Code (IC)
 */
var UserCodeEntry = /** @class */ (function (_super) {
    __extends(UserCodeEntry, _super);
    function UserCodeEntry(raw) {
        var _this = _super.call(this, raw) || this;
        _this.userCode = UserCode_1.default.decode(_this.data.substr(0, 12));
        _this.userNumber = parseInt(_this.data.substr(12, 3), 10);
        _this.keypadNumber = parseInt(_this.data.substr(15, 3), 10);
        return _this;
    }
    Object.defineProperty(UserCodeEntry.prototype, "isValidEntry", {
        get: function () {
            return this.userNumber !== 0;
        },
        enumerable: true,
        configurable: true
    });
    UserCodeEntry.COMMAND = 'IC';
    return UserCodeEntry;
}(ElkResponse_1.default));
exports.default = UserCodeEntry;
//# sourceMappingURL=UserCodeEntry.js.map