"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ElkResponse_1 = require("./ElkResponse");
/**
 * Reports an alarm
 *
 * Reporting of alarms through the built on serial port 0 consists of an
 * ASCII string following the same data format of the digital dialer’s
 * Contact ID transmission. Programming one of the telephone numbers with
 * a dialer format set to “Ethernet” will enable the transmissions of the
 * alarm ASCII strings over the RS-232 serial port 0.
 * Available in M1 Version 4.2.8 and after.
 *
 * @see 4.4.1 Alarm Reporting (AR)
 */
var AlarmReport = /** @class */ (function (_super) {
    __extends(AlarmReport, _super);
    function AlarmReport(raw) {
        var _this = _super.call(this, raw) || this;
        _this.accountNumber = parseInt(_this.data.substr(0, 6), 10);
        _this.alarmCode = parseInt(_this.data.substr(6, 4), 10);
        _this.areaNumber = parseInt(_this.data.substr(10, 2), 10);
        _this.zoneNumber = parseInt(_this.data.substr(12, 3), 10);
        _this.ipAddressNumber = parseInt(_this.data.substr(15, 1), 10);
        return _this;
    }
    AlarmReport.COMMAND = 'AR';
    return AlarmReport;
}(ElkResponse_1.default));
exports.default = AlarmReport;
//# sourceMappingURL=AlarmReport.js.map