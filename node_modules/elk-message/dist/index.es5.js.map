{"version":3,"file":"index.es5.js","sources":["../src/enums/AlarmState.ts","../src/enums/ArmUpState.ts","../src/enums/ArmingLevel.ts","../src/enums/AudioCommand.ts","../src/enums/BeepAndChimeMode.ts","../src/enums/ChimeMode.ts","../src/enums/CustomValueFormat.ts","../src/enums/DayOfWeek.ts","../src/enums/DisplayTextClearOption.ts","../src/enums/EventType.ts","../src/enums/FunctionKey.ts","../src/enums/IlluminationStatus.ts","../src/enums/KeypadKey.ts","../src/enums/LogWriteType.ts","../src/enums/MonthOfYear.ts","../src/enums/PartyMode.ts","../src/enums/PlcFunctionCode.ts","../src/enums/SystemTroubleType.ts","../src/enums/TemperatureDeviceType.ts","../src/enums/TextDescriptionType.ts","../src/enums/ThermostatMode.ts","../src/enums/ThermostatSetType.ts","../src/enums/UserCodeChangeType.ts","../src/enums/UserCodeType.ts","../src/enums/ZoneDefinition.ts","../src/enums/ZoneLogicalState.ts","../src/enums/ZonePhysicalState.ts","../src/messages/constants.ts","../src/util/numberToHex.ts","../src/util/calculateChecksum.ts","../src/messages/responses/ElkResponse.ts","../src/messages/responses/UnknownElkResponse.ts","../src/models/AreaArmingStatus.ts","../src/messages/responses/ArmingStatusReport.ts","../src/messages/responses/SendASCIIStringToIPAddress.ts","../src/messages/responses/AlarmReport.ts","../src/messages/responses/AlarmReportTest.ts","../src/messages/responses/EthernetModuleTest.ts","../src/messages/responses/AlarmByZoneReport.ts","../src/messages/responses/AudioDataReply.ts","../src/messages/responses/OutputChangeUpdate.ts","../src/messages/responses/AudioCommandOutgoing.ts","../src/messages/responses/ControlOutputStatusReport.ts","../src/models/CustomTimeOfDayValue.ts","../src/models/CustomNumberValue.ts","../src/messages/responses/CustomValueReply.ts","../src/messages/responses/UserCodeChangeReply.ts","../src/messages/responses/CounterValueReply.ts","../src/messages/responses/LightingDeviceDataReply.ts","../src/messages/responses/EntryExitTimer.ts","../src/messages/responses/EmailSendTrigger.ts","../src/models/UserCode.ts","../src/messages/responses/UserCodeEntry.ts","../src/messages/responses/InstallerModeExited.ts","../src/messages/responses/InsteonLightingDeviceStatusReply.ts","../src/messages/responses/KeypadAreaAssignments.ts","../src/messages/responses/KeypadKeyChange.ts","../src/messages/responses/KeypadFunctionKeyPressReply.ts","../src/messages/responses/SystemLogDataUpdate.ts","../src/messages/responses/TemperatureData.ts","../src/messages/responses/PlcChangeUpdate.ts","../src/messages/responses/PlcDeviceStatusReply.ts","../src/messages/responses/EthernetModuleReset.ts","../src/messages/responses/ElkRPConnected.ts","../src/messages/responses/RealTimeClockDataReply.ts","../src/messages/responses/TextDescriptionReply.ts","../src/messages/responses/SystemTroubleStatusReply.ts","../src/messages/responses/TemperatureReply.ts","../src/messages/responses/TaskChangeUpdate.ts","../src/messages/responses/ThermostatData.ts","../src/messages/responses/Omnistat2Reply.ts","../src/messages/responses/VersionNumberReply.ts","../src/messages/responses/UserCodeAreasReply.ts","../src/messages/responses/AlarmMemoryUpdate.ts","../src/models/ZoneStatus.ts","../src/messages/responses/ZoneChangeUpdate.ts","../src/messages/responses/ZoneBypassReply.ts","../src/messages/responses/ZonePartitionReport.ts","../src/messages/responses/ZoneStatusReport.ts","../src/messages/responses/ZoneDefinitionData.ts","../src/messages/responses/ZoneVoltageData.ts","../src/messages/responses/InsteonLightingDeviceProgrammed.ts","../src/messages/parse.ts","../src/messages/commands/ElkCommand.ts","../src/messages/commands/AlarmByZoneRequest.ts","../src/messages/commands/AlarmReportAcknowledge.ts","../src/messages/commands/AlarmReportTestAcknowledge.ts","../src/messages/commands/Arm.ts","../src/messages/commands/ArmingStatusRequest.ts","../src/messages/commands/AudioCommandIncoming.ts","../src/messages/commands/AudioDataRequest.ts","../src/messages/commands/ControlOutputOff.ts","../src/messages/commands/ControlOutputOn.ts","../src/messages/commands/ControlOutputStatusRequest.ts","../src/messages/commands/ControlOutputToggle.ts","../src/messages/commands/CounterValueRead.ts","../src/messages/commands/CounterValueWrite.ts","../src/messages/commands/CustomValueRead.ts","../src/messages/commands/CustomValueWrite.ts","../src/messages/commands/CustomValuesReadAll.ts","../src/messages/commands/DisplayTextOnScreen.ts","../src/messages/commands/EthernetModuleTestAcknowledge.ts","../src/messages/commands/InsteonLightingDeviceProgramRequest.ts","../src/messages/commands/InsteonLightingDeviceStatusRequest.ts","../src/messages/commands/KeypadAreaAssigmentsRequest.ts","../src/messages/commands/KeypadFunctionKeyPressRequest.ts","../src/messages/commands/KeypadFunctionKeyStatusRequest.ts","../src/messages/commands/LightingDeviceStatusRequest.ts","../src/messages/commands/Omnistat2Request.ts","../src/messages/commands/PlcDeviceControl.ts","../src/messages/commands/PlcDeviceOff.ts","../src/messages/commands/PlcDeviceOn.ts","../src/messages/commands/PlcDeviceStatusRequest.ts","../src/messages/commands/PlcDeviceToggle.ts","../src/messages/commands/RealTimeClockDataRequest.ts","../src/messages/commands/RealTimeClockDataWrite.ts","../src/messages/commands/SpeakPhrase.ts","../src/messages/commands/SpeakWord.ts","../src/messages/commands/SystemLogDataReadRequest.ts","../src/messages/commands/SystemLogDataWriteRequest.ts","../src/messages/commands/SystemTroubleStatusRequest.ts","../src/messages/commands/TaskActivation.ts","../src/messages/commands/TemperatureDataRequest.ts","../src/messages/commands/TemperatureRequest.ts","../src/messages/commands/TextDescriptionRequest.ts","../src/messages/commands/ThermostatDataRequest.ts","../src/messages/commands/ThermostatSet.ts","../src/messages/commands/ThermostatSetCoolSetPoint.ts","../src/messages/commands/ThermostatSetFan.ts","../src/messages/commands/ThermostatSetHeatSetPoint.ts","../src/messages/commands/ThermostatSetHold.ts","../src/messages/commands/ThermostatSetMode.ts","../src/messages/commands/UserCodeAreasRequest.ts","../src/messages/commands/UserCodeChangeRequest.ts","../src/messages/commands/VersionNumberRequest.ts","../src/messages/commands/ZoneBypassRequest.ts","../src/messages/commands/ZoneDefinitionRequest.ts","../src/messages/commands/ZonePartitionRequest.ts","../src/messages/commands/ZoneStatusRequest.ts","../src/messages/commands/ZoneTrigger.ts","../src/messages/commands/ZoneVoltageRequest.ts"],"sourcesContent":["enum AlarmState {\n  None = 48, // '0'\n  EntranceDelayActive = 49, // '1'\n  AlarmAbortDelayActive = 50, // '2'\n  FireAlarm = 51, // '3'\n  MedicalAlarm = 52, // '4'\n  PoliceAlarm = 53, // '5'\n  BurglarAlarm = 54, // '6'\n  Aux1Alarm = 55, // '7'\n  Aux2Alarm = 56, // '8'\n  Aux3Alarm = 57, // '9'\n  Aux4Alarm = 58, // ':'\n  CarbonMonoxideAlarm = 59, // ';'\n  EmergencyAlarm = 60, // '<'\n  FreezeAlarm = 61, // '='\n  GasAlarm = 62, // '>'\n  HeatAlarm = 63, // '?'\n  WaterAlarm = 64, // '@'\n  FireSupervisory = 65, // 'A'\n  VerifyFire = 66 // 'B'\n}\n\nnamespace AlarmState {\n  /**\n   * Determines if an AlarmState value indicates an active alarm\n   * @param alarmState The AlarmState to check\n   * @returns {boolean} True if the value is an active alarm;\n   *   Otherwise, false.\n   */\n  export function isActiveAlarm(alarmState: AlarmState) {\n    // tslint:disable-next-line:no-unnecessary-qualifier\n    return alarmState > AlarmState.AlarmAbortDelayActive;\n  }\n}\n\nexport default AlarmState;\n","enum ArmUpState {\n  NotReadyToArm = 48, // '0',\n  ReadyToArm = 49, // '1',\n  ReadyToArmForced = 50, // '2',\n  ArmedTimer = 51, // '3',\n  ArmedFully = 52, // '4',\n  ForceArmed = 53, // '5',\n  ArmedWithBypass = 54 // '6',\n}\n\nexport default ArmUpState;\n","enum ArmingLevel {\n  Disarm = 48, // '0',\n  ArmedAway = 49, // '1',\n  ArmedStay = 50, // '2',\n  ArmedStayInstant = 51, // '3',\n  ArmedNight = 52, // '4',\n  ArmedNightInstant = 53, // '5',\n  ArmedVacation = 54, // '6',\n  ArmToNextAwayMode = 55, // '7', // Version 4.2.8 or later\n  ArmToNextStayMode = 56, // '8', // Version 4.2.8 or later\n  ForceArmToAwayMode = 57, // '9', // Version 5.3.0 or later\n  ForceArmToStayMode = 58 // ':', // Version 5.3.0 or later\n}\n\n/* tslint:disable:no-unnecessary-qualifier */\nnamespace ArmingLevel {\n  export const AWAY_LEVELS = [\n    ArmingLevel.ArmedAway,\n    ArmingLevel.ArmedVacation,\n    ArmingLevel.ArmToNextAwayMode,\n    ArmingLevel.ForceArmToAwayMode\n  ];\n\n  export const NIGHT_LEVELS: ReadonlyArray<ArmingLevel> = [\n    ArmingLevel.ArmedNight,\n    ArmingLevel.ArmedNightInstant\n  ];\n\n  export const STAY_LEVELS: ReadonlyArray<ArmingLevel> = [\n    ...NIGHT_LEVELS,\n    ArmingLevel.ArmedStay,\n    ArmingLevel.ArmedStayInstant,\n    ArmingLevel.ArmToNextStayMode,\n    ArmingLevel.ForceArmToStayMode\n  ];\n\n  export const INSTANT_LEVELS: ReadonlyArray<ArmingLevel> = [\n    ArmingLevel.ArmedStayInstant,\n    ArmingLevel.ArmedNightInstant\n  ];\n\n  export const FORCE_LEVELS: ReadonlyArray<ArmingLevel> = [\n    ArmingLevel.ForceArmToAwayMode,\n    ArmingLevel.ForceArmToStayMode\n  ];\n\n  export const VACATION_LEVELS: ReadonlyArray<ArmingLevel> = [ArmingLevel.ArmedVacation];\n\n  export function isAway(armingLevel: ArmingLevel) {\n    return AWAY_LEVELS.includes(armingLevel);\n  }\n\n  export function isNight(armingLevel: ArmingLevel) {\n    return NIGHT_LEVELS.includes(armingLevel);\n  }\n\n  export function isStay(armingLevel: ArmingLevel) {\n    return STAY_LEVELS.includes(armingLevel);\n  }\n\n  export function isInstant(armingLevel: ArmingLevel) {\n    return INSTANT_LEVELS.includes(armingLevel);\n  }\n\n  export function isForce(armingLevel: ArmingLevel) {\n    return FORCE_LEVELS.includes(armingLevel);\n  }\n\n  export function isVacation(armingLevel: ArmingLevel) {\n    return VACATION_LEVELS.includes(armingLevel);\n  }\n}\n\nexport default ArmingLevel;\n","enum AudioCommand {\n  PowerOff = 0,\n  PowerOn = 1,\n  PowerToggle = 2,\n  NextSource = 3,\n  Source = 4,\n  PreviousSelect = 5,\n  NextSelect = 6,\n  VolumeDown = 7,\n  VolumeUp = 8,\n  MuteAudio = 9,\n  VolumeSet = 10,\n  Play = 11,\n  Pause = 12,\n  Stop = 13,\n  SelectFavorite1 = 14,\n  SelectFavorite2 = 15,\n  Minus = 16,\n  Plus = 17,\n  AllZonesOff = 18,\n  AllZonesOn = 19,\n  AudioSystemManufacturer = 20\n}\n\nexport default AudioCommand;\n","enum BeepAndChimeMode {\n  Off = 48, // '0'\n  Single = 49, // '1'\n  Constant = 50, // '2'\n  Chime = 52 // '4'\n}\n\nexport default BeepAndChimeMode;\n","enum ChimeMode {\n  Off = 48, // '0'\n  Chime = 49, // '1'\n  Voice = 50, // '2'\n  ChimeAndVoice = 51 // '3'\n}\n\nexport default ChimeMode;\n","enum CustomValueFormat {\n  Number = 0,\n  Timer = 1,\n  TimeOfDay = 2\n}\n\nexport default CustomValueFormat;\n","enum DayOfWeek {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7\n}\n\nnamespace DayOfWeek {\n  export function isWeekend(dayOfWeek: DayOfWeek) {\n    // tslint:disable-next-line:no-unnecessary-qualifier\n    return dayOfWeek === DayOfWeek.Saturday || dayOfWeek === DayOfWeek.Sunday;\n  }\n\n  export function isWeekday(dayOfWeek: DayOfWeek) {\n    return !isWeekend(dayOfWeek);\n  }\n}\n\nexport default DayOfWeek;\n","enum DisplayTextClearOption {\n  Clear = 0,\n  ClearWithStarKey = 1,\n  DisplayUntilTimeout = 2\n}\n\nexport default DisplayTextClearOption;\n","enum EventType {\n  NoEvent = 1000,\n  FireALarm = 1001,\n  FireSupervisoryAlarm = 1002,\n  BurglarAlarmAnyArea = 1003,\n  MedicalAlarmAnyArea = 1004,\n  PoliceAlarmAnyArea = 1005,\n  Aux1_24HourAlarmAnyArea = 1006,\n  Aux2_24HourAlarmAnyArea = 1007,\n  CarbonMonoxideAlarmAnyArea = 1008,\n  EmergencyAlarmAnyArea = 1009,\n  FreezeAlarmAnyArea = 1010,\n  GasAlarmAnyArea = 1011,\n  HeatAlarmAnyArea = 1012,\n  WaterAlarmAnyArea = 1013,\n  AlarmAnyArea = 1014,\n\n  BurglarAlarmArea1 = 1015,\n  BurglarAlarmArea2 = 1016,\n  BurglarAlarmArea3 = 1017,\n  BurglarAlarmArea4 = 1018,\n  BurglarAlarmArea5 = 1019,\n  BurglarAlarmArea6 = 1020,\n  BurglarAlarmArea7 = 1021,\n  BurglarAlarmArea8 = 1022,\n\n  MedicalAlarmArea1 = 1023,\n  MedicalAlarmArea2 = 1024,\n  MedicalAlarmArea3 = 1025,\n  MedicalAlarmArea4 = 1026,\n  MedicalAlarmArea5 = 1027,\n  MedicalAlarmArea6 = 1028,\n  MedicalAlarmArea7 = 1029,\n  MedicalAlarmArea8 = 1030,\n\n  PoliceAlarmArea1 = 1031,\n  PoliceAlarmArea2 = 1032,\n  PoliceAlarmArea3 = 1033,\n  PoliceAlarmArea4 = 1034,\n  PoliceAlarmArea5 = 1035,\n  PoliceAlarmArea6 = 1036,\n  PoliceAlarmArea7 = 1037,\n  PoliceAlarmArea8 = 1038,\n\n  Aux1_24HourAlarmArea1 = 1039,\n  Aux1_24HourAlarmArea2 = 1040,\n  Aux1_24HourAlarmArea3 = 1041,\n  Aux1_24HourAlarmArea4 = 1042,\n  Aux1_24HourAlarmArea5 = 1043,\n  Aux1_24HourAlarmArea6 = 1044,\n  Aux1_24HourAlarmArea7 = 1045,\n  Aux1_24HourAlarmArea8 = 1046,\n\n  Aux2_24HourAlarmArea1 = 1047,\n  Aux2_24HourAlarmArea2 = 1048,\n  Aux2_24HourAlarmArea3 = 1049,\n  Aux2_24HourAlarmArea4 = 1050,\n  Aux2_24HourAlarmArea5 = 1051,\n  Aux2_24HourAlarmArea6 = 1052,\n  Aux2_24HourAlarmArea7 = 1053,\n  Aux2_24HourAlarmArea8 = 1054,\n\n  CarbonMonoxideAlarmArea1 = 1055,\n  CarbonMonoxideAlarmArea2 = 1056,\n  CarbonMonoxideAlarmArea3 = 1057,\n  CarbonMonoxideAlarmArea4 = 1058,\n  CarbonMonoxideAlarmArea5 = 1059,\n  CarbonMonoxideAlarmArea6 = 1060,\n  CarbonMonoxideAlarmArea7 = 1061,\n  CarbonMonoxideAlarmArea8 = 1062,\n\n  EmergencyAlarmArea1 = 1063,\n  EmergencyAlarmArea2 = 1064,\n  EmergencyAlarmArea3 = 1065,\n  EmergencyAlarmArea4 = 1066,\n  EmergencyAlarmArea5 = 1067,\n  EmergencyAlarmArea6 = 1068,\n  EmergencyAlarmArea7 = 1069,\n  EmergencyAlarmArea8 = 1070,\n\n  FreezeAlarmArea1 = 1071,\n  FreezeAlarmArea2 = 1072,\n  FreezeAlarmArea3 = 1073,\n  FreezeAlarmArea4 = 1074,\n  FreezeAlarmArea5 = 1075,\n  FreezeAlarmArea6 = 1076,\n  FreezeAlarmArea7 = 1077,\n  FreezeAlarmArea8 = 1078,\n\n  GasAlarmArea1 = 1079,\n  GasAlarmArea2 = 1080,\n  GasAlarmArea3 = 1081,\n  GasAlarmArea4 = 1082,\n  GasAlarmArea5 = 1083,\n  GasAlarmArea6 = 1084,\n  GasAlarmArea7 = 1085,\n  GasAlarmArea8 = 1086,\n\n  HeatAlarmArea1 = 1087,\n  HeatAlarmArea2 = 1088,\n  HeatAlarmArea3 = 1089,\n  HeatAlarmArea4 = 1090,\n  HeatAlarmArea5 = 1091,\n  HeatAlarmArea6 = 1092,\n  HeatAlarmArea7 = 1093,\n  HeatAlarmArea8 = 1094,\n\n  WaterAlarmArea1 = 1095,\n  WaterAlarmArea2 = 1096,\n  WaterAlarmArea3 = 1097,\n  WaterAlarmArea4 = 1098,\n  WaterAlarmArea5 = 1099,\n  WaterAlarmArea6 = 1100,\n  WaterAlarmArea7 = 1101,\n  WaterAlarmArea8 = 1102,\n\n  AlarmArea1 = 1103,\n  AlarmArea2 = 1104,\n  AlarmArea3 = 1105,\n  AlarmArea4 = 1106,\n  AlarmArea5 = 1107,\n  AlarmArea6 = 1108,\n  AlarmArea7 = 1109,\n  AlarmArea8 = 1110,\n\n  CodeLockout = 1111,\n  CodeLockoutKeypad1 = 1112,\n  CodeLockoutKeypad2 = 1113,\n  CodeLockoutKeypad3 = 1114,\n  CodeLockoutKeypad4 = 1115,\n  CodeLockoutKeypad5 = 1116,\n  CodeLockoutKeypad6 = 1117,\n  CodeLockoutKeypad7 = 1118,\n  CodeLockoutKeypad8 = 1119,\n  CodeLockoutKeypad9 = 1120,\n  CodeLockoutKeypad10 = 1121,\n  CodeLockoutKeypad11 = 1122,\n  CodeLockoutKeypad12 = 1123,\n  CodeLockoutKeypad13 = 1124,\n  CodeLockoutKeypad14 = 1125,\n  CodeLockoutKeypad15 = 1126,\n  CodeLockoutKeypad16 = 1127,\n\n  FireTrouble = 1128,\n  BurglarTrouble = 1129,\n  FailToCommunicateTrouble = 1130,\n  RfSensorLowBatteryTrouble = 1131,\n  LostAncModuleTrouble = 1132,\n  LostKeypadTrouble = 1133,\n  LostInputExpanderTrouble = 1134,\n  LostOutputExpanderTrouble = 1135\n}\n\nexport default EventType;\n","enum FunctionKey {\n  None = 48, // '0'\n  F1 = 49, // '1'\n  F2 = 50, // '2'\n  F3 = 51, // '3'\n  F4 = 52, // '4'\n  F5 = 53, // '5'\n  F6 = 54, // '6'\n  SilenceTroubleBeep = 42, // '*' (0x2A)\n  Chime = 67 // 'C' (0x43)\n}\n\nexport default FunctionKey;\n","enum IlluminationStatus {\n  Off = 48, // '0',\n  On = 49, // '1',\n  Blinking = 50 // '2',\n}\n\nexport default IlluminationStatus;\n","enum KeypadKey {\n  None = 0, // or a user code was sent from a keypad.\n  Star = 11, // *\n  Pound = 12, // #\n  F1 = 13,\n  F2 = 14,\n  F3 = 15,\n  F4 = 16,\n  Stay = 17,\n  Exit = 18,\n  Chime = 19,\n  Bypass = 20,\n  Elk = 21,\n  Down = 22,\n  Up = 23,\n  Right = 24,\n  Left = 25,\n  F6 = 26,\n  F7 = 27,\n  Data = 28 // Data was entered, this acts as a carriage return\n}\n\nexport default KeypadKey;\n","enum LogWriteType {\n  AlarmRestore = 64,\n  Alarm = 128\n}\n\nexport default LogWriteType;\n","enum MonthOfYear {\n  January = 1,\n  February = 2,\n  March = 3,\n  April = 4,\n  May = 5,\n  June = 6,\n  July = 7,\n  August = 8,\n  September = 9,\n  October = 10,\n  November = 11,\n  December = 12\n}\n\nexport default MonthOfYear;\n","enum PartyMode {\n  Off = 0,\n  On = 1,\n  Master = 2\n}\n\nexport default PartyMode;\n","enum PlcFunctionCode {\n  AllUnitsOff = 1,\n  AllLightsOn = 2,\n  UnitOn = 3,\n  UnitOff = 4,\n  Dim = 5,\n  Bright = 6,\n  AllLightsOff = 7,\n  ExtendedCode = 8,\n  PresetDim = 9,\n  ExtendedData = 10,\n  StatusRequest = 11,\n  HailRequest = 12,\n  HailAcknowledgement = 13,\n  StatusOn = 14,\n  StatusOff = 15\n}\n\nexport default PlcFunctionCode;\n","enum SystemTroubleType {\n  None = 0,\n  ACFail = 1 << 0,\n  BoxTamper = 1 << 1,\n  FailToCommunicate = 1 << 2,\n  EEPromMemoryError = 1 << 3,\n  LowBatteryControl = 1 << 4,\n  TransmitterLowBattery = 1 << 5,\n  OverCurrent = 1 << 6,\n  TelephoneFault = 1 << 7,\n  Output2 = 1 << 8,\n  MissingKeypad = 1 << 9,\n  ZoneExpander = 1 << 10,\n  OutputExpander = 1 << 11,\n  ELKRPRemoteAccess = 1 << 12,\n  CommonAreaNotArmed = 1 << 13,\n  FlashMemoryError = 1 << 14,\n  SecurityAlert = 1 << 15,\n  SerialPortExpander = 1 << 16,\n  LostTransmitter = 1 << 17,\n  GESmokeCleanMe = 1 << 18,\n  EthernetTrouble = 1 << 19,\n  DisplayMessageInKeypadLine1 = 1 << 20,\n  DisplayMessageInKeypadLine2 = 1 << 21,\n  FireTrouble = 1 << 22\n}\n\nexport default SystemTroubleType;\n","enum TemperatureDeviceType {\n  TemperatureProbe = 0,\n  Keypad = 1,\n  Thermostat = 2\n}\n\nexport default TemperatureDeviceType;\n","enum TextDescriptionType {\n  ZoneName = 0,\n  AreaName = 1,\n  UserName = 2,\n  KeypadName = 3,\n  OutputName = 4,\n  TaskName = 5,\n  TelephoneName = 6,\n  LightName = 7,\n  AlarmDurationName = 8,\n  CustomSettings = 9,\n  CounterName = 10,\n  ThermostatName = 11,\n  FunctionKey1Name = 12,\n  FunctionKey2Name = 13,\n  FunctionKey3Name = 14,\n  FunctionKey4Name = 15,\n  FunctionKey5Name = 16,\n  FunctionKey6Name = 17,\n  AudioZoneName = 18,\n  AudioSourceName = 19\n}\n\nexport default TextDescriptionType;\n","enum ThermostatMode {\n  Off = 48, // '0'\n  Heat = 49, // '1'\n  Cool = 50, // '2'\n  Auto = 51, // '3'\n  EmergencyHeat = 52 // '4'\n}\n\nexport default ThermostatMode;\n","enum ThermostatSetType {\n  Mode = 0,\n  Hold = 1,\n  Fan = 2,\n  Temperature = 3,\n  CoolSetPoint = 4,\n  HeatSetPoint = 5\n}\n\nexport default ThermostatSetType;\n","enum UserCodeChangeType {\n  UserCode = 0,\n  SetRestriction = 1,\n  ClearRestriction = 2\n}\n\nexport default UserCodeChangeType;\n","enum UserCodeType {\n  User = 49,\n  Master = 50,\n  Installer = 51,\n  ElkRP = 52\n}\n\nexport default UserCodeType;\n","enum ZoneDefinition {\n  Disabled = 48, // '0'\n  BurglarEntryExit1 = 49, // '1'\n  BurglarEntryExit2 = 50, // '2'\n  BurglarPerimeterInstant = 51, // '3'\n  BurglarInterior = 52, // '4'\n  BurglarInteriorFollower = 53, // '5'\n  BurglarInteriorNight = 54, // '6'\n  BurglarInteriorNightDelay = 55, // '7'\n  Burglar24Hour = 56, // '8'\n  BurglarBoxTamper = 57, // '9'\n  FireAlarm = 58, // ':'\n  FireVerified = 59, // ';'\n  FireSupervisory = 60, // '<'\n  AuxAlarm1 = 61, // '='\n  AuxAlarm2 = 62, // '>'\n  Keyfob = 63, // '?'\n  NonAlarm = 64, // '@'\n  CarbonMonoxide = 65, // 'A'\n  EmergencyAlarm = 66, // 'B'\n  FreezeAlarm = 67, // 'C'\n  GasAlarm = 68, // 'D'\n  HeatAlarm = 69, // 'E'\n  MedicalAlarm = 70, // 'F'\n  PoliceAlarm = 71, // 'G'\n  PoliceNoIndication = 72, // 'H'\n  WaterAlarm = 73, // 'I'\n  KeyMomentaryArmDisarm = 74, // 'J'\n  KeyMomentaryArmAway = 75, // 'K'\n  KeyMomentaryArmStay = 76, // 'L'\n  KeyMomentaryDisarm = 77, // 'M'\n  KeyOnOff = 78, // 'N'\n  MuteAudibles = 79, // 'O'\n  PowerSupervisory = 80, // 'P'\n  Temperature = 81, // 'Q'\n  AnalogZone = 82, // 'R'\n  PhoneKey = 83, // 'S'\n  IntercomKey = 84 // 'T'\n}\n\nexport default ZoneDefinition;\n","enum ZoneLogicalState {\n  Normal = 0,\n  Trouble = 1,\n  Violated = 2,\n  Bypassed = 3\n}\n\nexport default ZoneLogicalState;\n","enum ZonePhysicalState {\n  Unconfigured = 0,\n  Open = 1,\n  EOL = 2,\n  Short = 3\n}\n\nexport default ZonePhysicalState;\n","/**\n * The number of characters used to represent the checksum in a\n * message packet.\n * @see 4.1.6\n */\nexport const CHECKSUM_WIDTH = 2;\n\n/**\n * The number of characters used to represent the packet length in\n * a message packet.\n * @see 4.1.1\n */\nexport const PACKET_LENGTH_WIDTH = 2;\n\n/**\n * The default reserved characters for a message packet.\n * @see 4.1.5\n */\nexport const RESERVED_DEFAULT = '00';\n\n/**\n * The number of characters used to represent the reserved portion of\n * a message packet.\n * @see 4.1.5\n */\nexport const RESERVED_WIDTH = RESERVED_DEFAULT.length;\n\n/**\n * The message termination characters\n * @see 4.1.7\n */\nexport const TERMINATOR = '\\r\\n';\n","/**\n * Converts a number to it's hexadecimal notation equivalent.\n * @param value The number to convert.\n * @param width The number of characters to pad the result to.\n * @return {string} A hexidecimal string representing the number provided.\n */\nexport default function numberToHex(value: number, width: number = 2): string {\n  return value\n    .toString(16)\n    .toUpperCase()\n    .padStart(width, '0');\n}\n","import { CHECKSUM_WIDTH } from '../messages/constants';\nimport numberToHex from './numberToHex';\n\n/**\n * Returns the two's complement of a value between 0 and 255.\n * @param value The value to calculate the two's compliment for.\n * @return The two's complement of the value.\n * @throws {RAngeError} if the value is less than 0 or greater than 255.\n */\nexport function twosComplement(value: number): number {\n  if (value < 0 || value > 255) {\n    throw new RangeError('Value must be between 0 and 255');\n  }\n\n  return (value ^ 0xff) + 1;\n}\n\n/**\n * Calculates the checksum for an elk message.\n * @see {M1-RS232-ASCII-Protocol} 4.1.6\n *\n * This is the hexadecimal two’s complement of the modulo-256 sum\n * of the ASCII values of all characters in the message excluding\n * the checksum itself and the CR-LF terminator at the end of the\n * message. Permissible characters are ASCII 0-9 and upper case A-F.\n * When all the characters are added to the Checksum, the value should equal 0.\n */\nexport default function calculateChecksum(input: string) {\n  const inputBuffer = Buffer.from(input, 'ascii');\n\n  // Sum all of the ASCII values.\n  const sum = inputBuffer.reduce((accumulator, char) => accumulator + char, 0);\n\n  // Find the two's complement of the module-256 sum.\n  const checksum = twosComplement(sum % 256);\n\n  // Convert it to hex.\n  return numberToHex(checksum, CHECKSUM_WIDTH);\n}\n","import ElkMessage from '../ElkMessage';\nimport { CHECKSUM_WIDTH, PACKET_LENGTH_WIDTH, RESERVED_WIDTH, TERMINATOR } from '../constants';\nimport calculateChecksum from '../../util/calculateChecksum';\nimport numberToHex from '../../util/numberToHex';\n\n/**\n * A regex expression that parses a raw message packet and captures:\n * 1. Packet length\n * 2. Message type\n * 3. Sub-message type\n * 4. Data\n * 5. Reserved\n * 6. Checksum\n * 7. Terminator\n */\nconst PACKET_REGEX = new RegExp(\n  `^(\\\\S{${PACKET_LENGTH_WIDTH}})(\\\\S)(\\\\S)(.*)(\\\\S{${RESERVED_WIDTH}})(\\\\S{${CHECKSUM_WIDTH}})(${TERMINATOR}|${\n    TERMINATOR[0]\n  }|${TERMINATOR[1]})$`\n);\n\n/**\n * A message that is received from the Elk M1\n */\nexport default class ElkResponse implements ElkMessage {\n  readonly isWellFormed: boolean = false;\n  readonly isChecksumValid: boolean = false;\n  readonly isPacketLengthValid: boolean = false;\n\n  readonly messageType?: string;\n  readonly subMessageType?: string;\n  readonly data: string = '';\n  readonly reserved?: string;\n  readonly checksum?: string;\n  readonly terminator?: string;\n  readonly expectedChecksum?: string;\n  readonly packetLength?: string;\n  readonly expectedPacketLength?: string;\n\n  constructor(readonly raw: string) {\n    const result = PACKET_REGEX.exec(raw);\n    this.isWellFormed = !!result;\n\n    if (result) {\n      this.packetLength = result[1];\n      this.messageType = result[2];\n      this.subMessageType = result[3];\n      this.data = result[4];\n      this.reserved = result[5];\n      this.checksum = result[6];\n      this.terminator = result[7];\n\n      this.expectedPacketLength = numberToHex(\n        raw.length - PACKET_LENGTH_WIDTH - this.terminator.length,\n        PACKET_LENGTH_WIDTH\n      );\n      this.expectedChecksum = calculateChecksum(\n        raw.substring(0, raw.length - CHECKSUM_WIDTH - this.terminator.length)\n      );\n\n      this.isChecksumValid = this.checksum === this.expectedChecksum;\n      this.isPacketLengthValid = this.packetLength === this.expectedPacketLength;\n    }\n  }\n\n  get command(): string | null {\n    if (!this.messageType || !this.subMessageType) {\n      return null;\n    }\n\n    return this.messageType[0] + this.subMessageType[0];\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * A response received from the Elk M1 that is an unrecognized message.\n */\nexport default class UnknownElkResponse extends ElkResponse {}\n","import ArmingLevel from '../enums/ArmingLevel';\nimport ArmUpState from '../enums/ArmUpState';\nimport AlarmState from '../enums/AlarmState';\n\nexport default class AreaArmingStatus {\n  constructor(\n    readonly area: number,\n    readonly armingLevel: ArmingLevel,\n    readonly armUpState: ArmUpState,\n    readonly alarmState: AlarmState\n  ) {}\n}\n","import ElkResponse from './ElkResponse';\nimport ArmUpState from '../../enums/ArmUpState';\nimport AlarmState from '../../enums/AlarmState';\nimport AreaArmingStatus from '../../models/AreaArmingStatus';\n\n/**\n * A response from the Elk M1 that reports the arming status for all areas.\n *\n * If the control’s area status changes, this message will be sent if\n * Global Option “Transmit Keypad Keys” is enabled.\n *\n * May be requested by sending a {@link ArmingStatusRequest}\n *\n * @see 4.2.13 Reply Arming Status Report Data (AS)\n */\nexport default class ArmingStatusReport extends ElkResponse {\n  static readonly COMMAND = 'AS';\n\n  /**\n   * An array describing status for each area\n   * (area 1 = index 0, area 2 = index 1, etc.)\n   */\n  readonly areas: AreaArmingStatus[];\n\n  constructor(raw: string) {\n    super(raw);\n\n    const armingLevels = Array.from(this.data.substr(0, 8)).map(char => char.charCodeAt(0));\n    const armUpStates = Array.from(this.data.substr(8, 8)).map(char => char.charCodeAt(0));\n    const alarmStates = Array.from(this.data.substr(16, 8)).map(char => char.charCodeAt(0));\n\n    this.areas = [1, 2, 3, 4, 5, 6, 7, 8].map(\n      (areaNumber, index) =>\n        new AreaArmingStatus(\n          areaNumber,\n          armingLevels[index],\n          armUpStates[index],\n          alarmStates[index]\n        )\n    );\n  }\n\n  /**\n   * Gets the arming status for an area\n   * @param areaNumber The area number (1..8)\n   */\n  getAreaStatus(areaNumber: number): AreaArmingStatus {\n    return this.areas[areaNumber - 1];\n  }\n\n  /**\n   * If any area has an {@link AreaArmingStatus.armUpState} of\n   * {@link ArmUpState.ArmedTimer}, this will return the\n   * exit time in seconds; Othwerise, this returns `null`\n   */\n  get exitTime(): number | null {\n    if (\n      this.reserved &&\n      this.areas.find(areaStatus => areaStatus.armUpState === ArmUpState.ArmedTimer)\n    ) {\n      return parseInt(this.reserved, 10);\n    }\n\n    return null;\n  }\n\n  /**\n   * If any area has an {@link AreaArmingStatus.alarmState} of\n   * {@link AlarmState.EntranceDelayActive} and no areas have an\n   * {@link AreaArmingStatus.armUpState} of {@link ArmUpState.ArmedTimer},\n   * this will return the entrance time in seconds; Othwerise, this\n   * returns `null`.\n   */\n  get entranceTime(): number | null {\n    if (\n      this.reserved &&\n      this.exitTime === null &&\n      this.areas.find(areaStatus => areaStatus.alarmState === AlarmState.EntranceDelayActive)\n    ) {\n      return parseInt(this.reserved, 10);\n    }\n\n    return null;\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Send ASCII String To IP Address\n *\n * It is recommended this response NOT be used.\n *\n * The documentation on this particular \"command\" is very confusing.\n * Upper-cased commands are supposed to be responses from the M1,\n * but the documentation for this reads as those it's a command that\n * can be sent TO the panel. The example include message packets\n * which aren't even valid (they don't have checksums, the reserved\n * values, and the terminator).\n *\n * So I'm not entirely sure how this is supposed to be implemented.\n * For now it does some minimal parsing as a response message.\n *\n * TODO: Implement correctly?\n *\n * @see 4.3 Send ASCII String To IP Address (AP)\n */\nexport default class SendASCIIStringToIPAddress extends ElkResponse {\n  static readonly COMMAND = 'AP';\n\n  readonly ipAddressNumber: number;\n  readonly textData: string;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.ipAddressNumber = parseInt(this.data.substr(0, 1), 10);\n    this.textData = this.data.substr(1);\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reports an alarm\n *\n * Reporting of alarms through the built on serial port 0 consists of an\n * ASCII string following the same data format of the digital dialer’s\n * Contact ID transmission. Programming one of the telephone numbers with\n * a dialer format set to “Ethernet” will enable the transmissions of the\n * alarm ASCII strings over the RS-232 serial port 0.\n * Available in M1 Version 4.2.8 and after.\n *\n * @see 4.4.1 Alarm Reporting (AR)\n */\nexport default class AlarmReport extends ElkResponse {\n  static readonly COMMAND = 'AR';\n\n  readonly accountNumber: number;\n\n  /**\n   * Alarm code\n   */\n  readonly alarmCode: number;\n\n  /**\n   * Area number where alarm occured (1..8)\n   */\n  readonly areaNumber: number;\n\n  /**\n   * Zone/user number (1..208)\n   */\n  readonly zoneNumber: number;\n\n  /**\n   * IP Address nunber to send alarm on. Valid 1 to 8 on M1 Gold,\n   * 1 to 4 on M1 Standard and Ez8.\n   */\n  readonly ipAddressNumber: number;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.accountNumber = parseInt(this.data.substr(0, 6), 10);\n    this.alarmCode = parseInt(this.data.substr(6, 4), 10);\n    this.areaNumber = parseInt(this.data.substr(10, 2), 10);\n    this.zoneNumber = parseInt(this.data.substr(12, 3), 10);\n    this.ipAddressNumber = parseInt(this.data.substr(15, 1), 10);\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Alarm Reporting Test\n *\n * The Alarm Reporting Test string is sent every 15 minutes from the M1\n * as a keep alive message to the M1XEP Ethernet Module along with which\n * IP address to test. All IP addresses are set into the M1XEP module.\n *\n * @see 4.4.3 Alarm Reporting Test (AT)\n */\nexport default class AlarmReportTest extends ElkResponse {\n  static readonly COMMAND = 'AT';\n\n  /**\n   * IP Address to test (1..8), identified by it's configured\n   * number/index (1-based).\n   */\n  readonly ipAddressNumber: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.ipAddressNumber = parseInt(this.data.substr(0, 1), 10);\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport DayOfWeek from '../../enums/DayOfWeek';\nimport MonthOfYear from '../../enums/MonthOfYear';\n\n/**\n * Ethernet Module Test\n *\n * The “XK” command is automatically sent every 30 seconds. This is\n * done regardless of whether an M1XEP Ethernet Module is present or\n * not. The XK command serves two purposes.\n *  1) It tests to see if a M1XEP Ethernet Module is connected to\n *     the Control.\n *  2) It includes the Control’s real time clock information (current\n *     Date and Time) for general purpose use, including but not limited\n *     to clock synchronization by a third party device.\n *\n * The expected response from a connected M1XEP Ethernet Module is “xk”.\n * However, the Control does not actually care or keep track of a missing\n * “xk” response UNLESS or UNTIL after a M1XEP Ethernet Module has been\n * properly enrolled with the Control. This can be accomplished via the\n * Bus Module Enrollment process (Keypad programming Menu 1) or by the RP\n * software). Once an M1XEP has been enrolled, the Control will now begin\n * tracking each response to an “XK” command, and it will display and log\n * an “Ethernet Trouble” message if an “xk” response is not received\n * within 120 seconds of the “XK” command. This response scenario is also\n * true for alarm reporting commands “AT” and “AR”. Basically, the M1XEP\n * will withhold sending the “xk” response if it should fail to complete\n * an alarm or restoral transmission after 2 attempts. This allows for\n * 1 transmission miss.\n *\n * NOTE: Control Firmware Version 4.32 and after includes the M1’s real\n * time clock information.\n *\n * @see 4.4.5 Ethernet Module Test (XK)\n */\nexport default class EthernetModuleTest extends ElkResponse {\n  static readonly COMMAND = 'XK';\n\n  readonly seconds: number;\n  readonly minutes: number;\n  readonly hour: number;\n  readonly dayOfWeek: DayOfWeek;\n  readonly dayOfMonth: number;\n  readonly monthOfYear: MonthOfYear;\n  readonly year: number;\n\n  /**\n   * True if daylight savings time is currently active; Otherwise, false.\n   */\n  readonly isDst: boolean;\n\n  /**\n   * True if the system is using 12-hour clock mode.\n   */\n  readonly is12hourClockMode: boolean;\n\n  /**\n   * True if the date display mode is \"dd/mm\"; fale if it is \"mm/dd\"\n   */\n  readonly isDateModeDayFirst: boolean;\n\n  /**\n   * A date object representing the control's realtime clock values.\n   */\n  readonly date: Date;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.seconds = parseInt(this.data.substr(0, 2), 10);\n    this.minutes = parseInt(this.data.substr(2, 2), 10);\n    this.hour = parseInt(this.data.substr(4, 2), 10);\n    this.dayOfWeek = parseInt(this.data.substr(6, 1), 10);\n    this.dayOfMonth = parseInt(this.data.substr(7, 2), 10);\n    this.monthOfYear = parseInt(this.data.substr(9, 2), 10);\n    this.year = 2000 + parseInt(this.data.substr(11, 2), 10);\n    this.isDst = this.data.substr(13, 1) === '1';\n    this.is12hourClockMode = this.data.substr(14, 1) === '1';\n    this.isDateModeDayFirst = this.data.substr(15, 1) === '1';\n\n    // TODO: What to do with this? I'm not sure we have any way of\n    // know which timezone we're dealing with. And it's not UTC.\n    this.date = new Date(\n      Date.UTC(\n        this.year,\n        this.monthOfYear - 1, // JavaScript uses 0-based months.\n        this.dayOfMonth,\n        this.hour,\n        this.minutes,\n        this.seconds\n      )\n    );\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport ZoneDefinition from '../../enums/ZoneDefinition';\n\n/**\n * Reply Alarm By Zone Report Data\n *\n * May be requested by sending a {@link AlarmByZoneRequest}\n *\n * @see 4.5.1 Reply Alarm By Zone Report Data (AZ)\n */\nexport default class AlarmByZoneReport extends ElkResponse {\n  static readonly COMMAND = 'AZ';\n\n  readonly zones: ZoneDefinition[];\n  readonly zonesInAlarm: number[];\n\n  constructor(raw: string) {\n    super(raw);\n    this.zones = Array.from(this.data).map(char => char.charCodeAt(0));\n    this.zonesInAlarm = this.zones.reduce((alarmedZones: number[], current, index) => {\n      if (current !== ZoneDefinition.Disabled) {\n        return [...alarmedZones, index + 1];\n      }\n      return alarmedZones;\n    }, []);\n  }\n\n  getZoneAlarm(zoneNumber: number): ZoneDefinition {\n    return this.zones[zoneNumber - 1];\n  }\n\n  get hasAlarms() {\n    return this.zonesInAlarm.length > 0;\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport PartyMode from '../../enums/PartyMode';\n\n/**\n * Reply With Audio Data\n *\n * Sent as a response to {@link AudioDataRequest}\n *\n * @see 4.6.2 Reply With Audio Data (CA)\n */\nexport default class AudioDataReply extends ElkResponse {\n  static readonly COMMAND = 'CA';\n\n  /**\n   * The zone number (0..18)\n   */\n  readonly zone: number;\n\n  /**\n   * Whether zone is powered.\n   */\n  readonly isPowered: boolean;\n\n  /**\n   * Source (1..12)\n   */\n  readonly source: number;\n\n  /**\n   * Volume (0..100)\n   */\n  readonly volume: number;\n\n  /**\n   * Bass (000=down(-), 50=center, 100=up(+))\n   */\n  readonly bass: number;\n\n  /**\n   * Treble (000=down(-), 50=center), 100=up(+))\n   */\n  readonly treble: number;\n\n  /**\n   * Whether loudness is turned on.\n   */\n  readonly isLoudness: boolean;\n\n  /**\n   * Balance (000=left, 50=center, 100=right)\n   */\n  readonly balance: number;\n\n  /**\n   * Party mode (‘0’=off, ‘1’=on, ‘2’=master)\n   */\n  readonly partyMode: PartyMode;\n\n  readonly isDoNotDisturb: boolean;\n\n  constructor(raw: string) {\n    super(raw);\n    this.zone = parseInt(this.data.substr(0, 2), 10);\n    this.isPowered = this.data.substr(2, 1) === '1';\n    this.source = parseInt(this.data.substr(3, 2), 10);\n    this.volume = parseInt(this.data.substr(5, 3), 10);\n    this.bass = parseInt(this.data.substr(8, 3), 10);\n    this.treble = parseInt(this.data.substr(11, 3), 10);\n    this.isLoudness = this.data.substr(14, 1) === '1';\n    this.balance = parseInt(this.data.substr(15, 3), 10);\n    this.partyMode = parseInt(this.data.substr(18, 1), 10);\n    this.isDoNotDisturb = this.data.substr(19, 1) === '1';\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Output Change Update\n *\n * This transmission update option transmits the updated status whenever\n * it changes and is enabled by setting the location TRUE in the M1 Control\n * Global Programming Locations 37.\n * Example: “Xmit OutputChgs–ASCII” (Yes or No)\n *\n * The Output Change Update will also be transmitted out M1XSP Serial Port\n * Expanders that are configured in the Generic Mode.\n *\n * @see 4.7 Output Change Update (CC)\n */\nexport default class OutputChangeUpdate extends ElkResponse {\n  static readonly COMMAND = 'CC';\n\n  readonly outputNumber: number;\n  readonly isOn: boolean;\n\n  constructor(raw: string) {\n    super(raw);\n    this.outputNumber = parseInt(this.data.substr(0, 3), 10);\n    this.isOn = this.data.substr(3, 1) === '1';\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport AudioCommand from '../../enums/AudioCommand';\n\n/**\n * Outgoing Audio Command\n *\n * A response to {@link AudioCommandIncoming}\n *\n * @see 4.8.3 Outgoing Audio Command (CD)\n */\nexport default class AudioCommandOutgoing extends ElkResponse {\n  static readonly COMMAND = 'CD';\n\n  readonly audioCommand: AudioCommand;\n  readonly audioSource: number;\n  readonly audioZone: number;\n  readonly value: number;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.audioCommand = parseInt(this.data.substr(0, 2), 10);\n    this.audioSource = parseInt(this.data.substr(2, 2), 10);\n    this.audioZone = parseInt(this.data.substr(4, 2), 10);\n    this.value = parseInt(this.data.substr(6, 3), 10);\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Control Output Status Report\n *\n * The control panel sends this message in response\n * to a {@link ControlOutputStatusRequest}. The data portion\n * of this message is 208 characters long, one character\n * for each output in order. The value will be: 0 (Off), 1 (On).\n *\n * @see 4.9.4 Control Output Status Report (CS)\n */\nexport default class ControlOutputStatusReport extends ElkResponse {\n  static readonly COMMAND = 'CS';\n\n  readonly outputStatuses: ReadonlyArray<boolean>;\n\n  constructor(raw: string) {\n    super(raw);\n    this.outputStatuses = Array.from(this.data).map(char => char === '1');\n  }\n\n  isOutputOn(outputNumber: number): boolean {\n    return this.outputStatuses[outputNumber - 1];\n  }\n}\n","import CustomValueFormat from '../enums/CustomValueFormat';\nimport CustomValue from './CustomValue';\n\n/**\n * Represents a custom value with the TimeOfDay type.\n */\nexport default class CustomTimeOfDayValue implements CustomValue {\n  static decode(input: string) {\n    const decimalValue = parseInt(input, 10);\n    const hexValue = decimalValue.toString(16);\n    const hour = parseInt(hexValue.substr(0, 2), 16);\n    const minutes = parseInt(hexValue.substr(2, 2), 16);\n    return new CustomTimeOfDayValue(hour, minutes);\n  }\n\n  readonly format: CustomValueFormat = CustomValueFormat.TimeOfDay;\n\n  constructor(readonly hour: number, readonly minutes: number) {}\n\n  encode() {\n    const timeInHex =\n      this.hour.toString(16).padStart(2, '0') + this.minutes.toString(16).padStart(2, '0');\n    return parseInt(timeInHex, 16)\n      .toString()\n      .padStart(5, '0');\n  }\n}\n","import CustomValueFormat from '../enums/CustomValueFormat';\nimport CustomValue from './CustomValue';\n\n/**\n * Represents a custom value of Number or Timer type.\n */\nexport default class CustomNumberValue implements CustomValue {\n  static decode(input: string, format: CustomValueFormat) {\n    const decimalValue = parseInt(input, 10);\n    return new CustomNumberValue(decimalValue, format);\n  }\n\n  constructor(\n    readonly value: number,\n    readonly format: CustomValueFormat = CustomValueFormat.Number\n  ) {\n    if (format === CustomValueFormat.TimeOfDay) {\n      throw new Error(\n        'CustomNumberValue format must be Number or Timer. Use CustomTimeOfDayValue for TimeOfDay format.'\n      );\n    }\n  }\n\n  encode() {\n    return this.value.toString().padStart(5, '0');\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport CustomValue from '../../models/CustomValue';\nimport { CustomValueFormat } from '../../enums';\nimport CustomTimeOfDayValue from '../../models/CustomTimeOfDayValue';\nimport CustomNumberValue from '../../models/CustomNumberValue';\n\nconst SPLIT_ALL_REGEX = /.{1,6}/g;\n\n/**\n * Reply With Custom Value\n *\n * Sent in response to a {@link CustomValueRead}\n * or {@link CustomValuesReadAll}\n *\n * @see 4.10.3 Reply With Custom Value (CR)\n */\nexport default class CustomValueReply extends ElkResponse {\n  static readonly COMMAND = 'CR';\n\n  static decodeCustomValue(input: string): CustomValue {\n    const value = input.substr(0, 5);\n    const format = parseInt(input.substr(5, 1), 10);\n    return format === CustomValueFormat.TimeOfDay\n      ? CustomTimeOfDayValue.decode(value)\n      : CustomNumberValue.decode(value, format);\n  }\n\n  readonly values: CustomValue[];\n\n  /**\n   * If only a single value was returned, this will be the value's number and\n   * `values` will contains a single value.\n   * If all values were returned, this will be 0 and `values` will contain all 20\n   * custom values.\n   */\n  readonly valueNumber: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.valueNumber = parseInt(this.data.substr(0, 2), 10);\n\n    if (this.valueNumber === 0) {\n      // ALL values were returned.\n      const matches = this.data.substr(2).match(SPLIT_ALL_REGEX);\n      this.values = matches\n        ? matches.map((chunk, index) => CustomValueReply.decodeCustomValue(chunk.substr(0, 6)))\n        : [];\n    } else {\n      this.values = [CustomValueReply.decodeCustomValue(this.data.substr(2, 6))];\n    }\n  }\n\n  getCustomValue(valueNumber: number = 1): CustomValue {\n    return this.values[valueNumber - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport UserCodeChangeType from '../../enums/UserCodeChangeType';\n\n/**\n * Reply Change User Code\n *\n * Response to {@link UserCodeChangeRequest}\n *\n * @see 4.11.2 Reply Change User Code (CU)\n */\nexport default class UserCodeChangeReply extends ElkResponse {\n  static readonly COMMAND = 'CU';\n\n  readonly userCode: number;\n  readonly isSuccessful: boolean;\n  readonly isInvalidAuthorizationCode: boolean;\n  readonly isDuplicateCode: boolean;\n  readonly changeType: UserCodeChangeType;\n\n  constructor(raw: string) {\n    super(raw);\n    this.userCode = parseInt(this.data.substr(0, 3), 10);\n    this.isSuccessful = this.userCode > 0 && this.userCode < 255;\n    this.isInvalidAuthorizationCode = this.userCode === 0;\n    this.isDuplicateCode = this.userCode === 255;\n    this.changeType = this.reserved ? parseInt(this.reserved[0], 10) : UserCodeChangeType.UserCode;\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reply With Counter Value Format\n *\n * Sent in response to a {@link CounterValuRead}\n *\n * 4.12.3 Reply With Counter Value Format (CV)\n */\nexport default class CounterValueReply extends ElkResponse {\n  static readonly COMMAND = 'CV';\n\n  readonly counterNumber: number;\n  readonly value: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.counterNumber = parseInt(this.data.substr(0, 2), 10);\n    this.value = parseInt(this.data.substr(2, 5), 10);\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reply Lighting Device Status Data\n *\n * @see 4.14.2 Reply Lighting Device Status Data (DS)\n */\nexport default class LightingDeviceDataReply extends ElkResponse {\n  static readonly COMMAND = 'DS';\n\n  /**\n   * The lighting device number (1..256)\n   */\n  readonly lightingDeviceNumber: number;\n\n  /**\n   * The lighting level, 0..100, where 0 = off, 100 = full on, and\n   * anything in between is the dim level.\n   * NOTE: this is different than what the M1 returns, which will\n   * return a `1` for full on.\n   */\n  readonly lightingLevel: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.lightingDeviceNumber = parseInt(this.data.substr(0, 3), 10);\n    this.lightingLevel = parseInt(this.data.substr(3, 2), 10);\n\n    if (this.lightingLevel === 1) {\n      this.lightingLevel = 100;\n    }\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport { ArmingLevel } from '../../enums';\n\n/**\n * Send Entry/Exit Data\n *\n * This sends the entry 1 & 2 and exit 1 & 2 time data when the timers\n * start by area. When each exit timer expires an “EE” command is also\n * transmitted.\n * M1 Version 4.1.12, 5.1.12 or later.\n * Armed State available in 4.1.18, 5.1.18 or later.\n *\n * @see 4.15.1 Send Entry/Exit Data (EE)\n */\nexport default class ExntryExitTimer extends ElkResponse {\n  static readonly COMMAND = 'EE';\n\n  readonly isEntry: boolean;\n\n  /**\n   * Area number where alarm occured\n   */\n  readonly areaNumber: number;\n\n  readonly timer1: number;\n  readonly timer2: number;\n  readonly armingLevel: ArmingLevel;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.areaNumber = parseInt(this.data.substr(0, 1), 10);\n    this.isEntry = this.data.substr(1, 1) === '1';\n    this.timer1 = parseInt(this.data.substr(2, 3), 10);\n    this.timer2 = parseInt(this.data.substr(5, 3), 10);\n    this.armingLevel = this.data.charCodeAt(8);\n  }\n\n  get isExit() {\n    return !this.isEntry;\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Send Email Trigger\n *\n * This command allows the triggering of email transmissions from\n * the M1XEP Ethernet interface. This command originates in the M1\n * and is sent to the M1XEP through serial port 0 only.\n * M1 Version 4.2.8 and after.\n *\n * @see 4.16.1 Send Email Trigger Data (EM)\n */\nexport default class EmailSendTrigger extends ElkResponse {\n  static readonly COMMAND = 'EM';\n\n  readonly emailAddressNumber: number;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.emailAddressNumber = parseInt(this.data.substr(0, 3), 10);\n  }\n}\n","/**\n * Matches on a user-entered code.\n */\nconst USER_CODE_REGEX = /^(0\\d)(0\\d)(0\\d)(0\\d)(0\\d)(0\\d)$/;\n\nexport default class UserCode {\n  static decode(input: string) {\n    const userCodeMatch = input.match(USER_CODE_REGEX);\n\n    if (userCodeMatch) {\n      // The regex match result contains the entire string as index 0,\n      // and each match as index 1..7. Each of those will be preceded by\n      // a zero, so exclude those \"0\" characters and join them to get the\n      // code.\n      return new UserCode(\n        userCodeMatch\n          .slice(1, 7)\n          .map(char => char[1])\n          .join(''),\n        false\n      );\n    } else {\n      return new UserCode(input, true);\n    }\n  }\n\n  constructor(readonly code: string, readonly isProximityCard: boolean = false) {}\n\n  encode(width = 12) {\n    if (this.isProximityCard) {\n      return this.code.padStart(width, '0');\n    }\n\n    return Array.from(this.code)\n      .map(char => `0${char}`)\n      .join('')\n      .padStart(width, '0');\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport UserCode from '../../models/UserCode';\n\n/**\n * Send Valid User Number And Invalid User Code\n *\n * This ASCII Data Packet will be sent when a user code is entered\n * and a valid code is found. Only the valid user code number will be\n * returned. If a user code is not found in the M1’s User Code Data\n * Base, the code that was enter will be sent. If the User Code\n * Length is set to 4 digits, the invalid data packet will be sent\n * after 4 digits are entered, then repeated for each additional\n * invalid user code digit. If the User Code Length is set to 6\n * digits, the invalid data packet will be sent after 6 digits\n * are entered, then repeated for each additional invalid user\n * digit. If prox card data is enter, the packet will be sent\n * immediately. This data can be used by automation equipment\n * with its own user code data base. The automation equipment\n * would sent the appropriate arm/disarm command (“a0” to “a6”)\n * or output relay control commands (“cn”, “cf”, or “ct”) back\n * to the M1 after it has verified the proper code is in its data\n * base. Modified for 26 bit Weigand data cards and available in\n * M1 Version 4.2.8 and after.\n *\n * @see 4.17 Send Valid User Number And Invalid User Code (IC)\n */\nexport default class UserCodeEntry extends ElkResponse {\n  static readonly COMMAND = 'IC';\n\n  readonly userCode: UserCode;\n\n  readonly userNumber: number;\n\n  readonly keypadNumber: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.userCode = UserCode.decode(this.data.substr(0, 12));\n    this.userNumber = parseInt(this.data.substr(12, 3), 10);\n    this.keypadNumber = parseInt(this.data.substr(15, 3), 10);\n  }\n\n  get isValidEntry() {\n    return this.userNumber !== 0;\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Installer Mode Exited\n *\n * This command is automatically sent through serial port 0 only\n * when the installer mode is terminated. This is done by pressing\n * the “*” key three times or the installer timer runs out. This\n * command is used by the M1XEP Ethernet Interface to know when to\n * reload M1 program data after an installer has done any keypad\n * programming. M1 Version 4.2.8 and after.\n *\n * @see 4.18.1 Send Installer Mode Exited (IE)\n */\nexport default class InstallerModeExited extends ElkResponse {\n  static readonly COMMAND = 'IE';\n}\n","import ElkResponse from './ElkResponse';\n\nconst SPLIT_DEVICE_IDS_REGEX = /.{1,6}/g;\n\n/**\n * Reply Read Of Insteon Lighting Device Data\n *\n * @see 4.19.4 Reply Read Of Insteon Lighting Device Data (IR)\n */\nexport default class InsteonLightingDeviceStatusReply extends ElkResponse {\n  static readonly COMMAND = 'IR';\n\n  readonly startingDeviceNumber: number;\n  readonly deviceCount: number;\n  readonly deviceIds: string[];\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.startingDeviceNumber = parseInt(this.data.substr(0, 3), 10);\n    this.deviceCount = parseInt(this.data.substr(3, 1), 10);\n    this.deviceIds = this.data.substr(4).match(SPLIT_DEVICE_IDS_REGEX) || [];\n  }\n\n  get endingDeviceNumber() {\n    return this.startingDeviceNumber + this.deviceCount - 1;\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reply With Keypad Areas\n *\n * @see 4.20.2 Reply With Keypad Areas (KA)\n */\nexport default class KeypadAreaAssignments extends ElkResponse {\n  static readonly COMMAND = 'KA';\n\n  readonly areas: number[];\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.areas = Array.from(this.data.substr(0, 16)).map(area => parseInt(area, 10));\n  }\n\n  getKeypadArea(keypad: number) {\n    return this.areas[keypad - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport BeepAndChimeMode from '../../enums/BeepAndChimeMode';\nimport KeypadKey from '../../enums/KeypadKey';\nimport IlluminationStatus from '../../enums/IlluminationStatus';\n\n/**\n * Keypad KeyChange Update\n *\n * @see 4.21 Keypad KeyChange Update (KC)\n */\nexport default class KeypadKeyChange extends ElkResponse {\n  static readonly COMMAND = 'KC';\n\n  readonly keypadNumber: number;\n  readonly keyPressed: KeypadKey;\n  readonly functionKeyIlluminations: IlluminationStatus[];\n  readonly isCodeRequiredToBypass: boolean;\n  readonly areaBeepAndChimeModes: BeepAndChimeMode[];\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.keypadNumber = parseInt(this.data.substr(0, 2), 10);\n    this.keyPressed = parseInt(this.data.substr(2, 2), 10);\n    this.functionKeyIlluminations = Array.from(this.data.substr(4, 6)).map(illumination =>\n      illumination.charCodeAt(0)\n    );\n    this.isCodeRequiredToBypass = this.data.substr(10, 1) === '1';\n    this.areaBeepAndChimeModes = Array.from(this.data.substr(11, 8)).map(mode =>\n      mode.charCodeAt(0)\n    );\n  }\n\n  getBeepAndChimeMode(areaNumber: number) {\n    return this.areaBeepAndChimeModes[areaNumber - 1];\n  }\n\n  getFunctionKeyIllumination(keyNumber: number) {\n    return this.functionKeyIlluminations[keyNumber - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport FunctionKey from '../../enums/FunctionKey';\nimport ChimeMode from '../../enums/ChimeMode';\n\n/**\n * Reply Keypad Function Key Press\n *\n * @see 4.22.2 Reply Keypad Function Key Press (KF)\n */\nexport default class KeypadFunctionKeyPressReply extends ElkResponse {\n  static readonly COMMAND = 'KF';\n\n  readonly keypadNumber: number;\n  readonly functionKey: FunctionKey;\n  readonly chimeModes: ChimeMode[];\n\n  constructor(raw: string) {\n    super(raw);\n    this.keypadNumber = parseInt(this.data.substr(0, 2), 10);\n    this.functionKey = this.data.substr(2, 1).charCodeAt(0);\n    this.chimeModes = Array.from(this.data.substr(3, 8)).map(char => char.charCodeAt(0));\n  }\n\n  getChimeMode(areaNumber: number) {\n    return this.chimeModes[areaNumber - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport DayOfWeek from '../../enums/DayOfWeek';\n\n/**\n * System Log Data Update\n *\n * As the control log is written, the same information is\n *  sent out the RS-232 port. The log information will have\n * the ddd index value set to “000” to indicate a logging\n * entry.\n *\n * The log data may also be requested with the “ld”\n * (lower case “LD”) command below. Modified in M1 version 4.3.2\n *\n * The “System Log Data Update” transmission option, transmits the\n * updated status whenever it changes and is enabled by setting the\n * location TRUE in the M1 Control Global Programming Locations 35.\n * Example: “Xmit Event Log–ASCII” (Yes or No). The request for log\n * data “ld” is not controlled by this option.\n *\n * @see 4.23 System Log Data Update (LD)\n */\nexport default class SystemLogDataUpdate extends ElkResponse {\n  static readonly COMMAND = 'LD';\n\n  readonly logIndex: number;\n  readonly event: number;\n  readonly eventNumberData: number;\n  readonly areaNumber: number;\n  readonly hour: number;\n  readonly minutes: number;\n  readonly month: number;\n  readonly day: number;\n  readonly dayOfWeek: DayOfWeek;\n  readonly year: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.event = parseInt(this.data.substr(0, 4), 10);\n    this.eventNumberData = parseInt(this.data.substr(4, 3), 10);\n    this.areaNumber = parseInt(this.data.substr(7, 1), 10);\n    this.hour = parseInt(this.data.substr(8, 2), 10);\n    this.minutes = parseInt(this.data.substr(10, 2), 10);\n    this.month = parseInt(this.data.substr(12, 2), 10);\n    this.day = parseInt(this.data.substr(14, 2), 10);\n    this.logIndex = parseInt(this.data.substr(16, 3), 10);\n    this.dayOfWeek = parseInt(this.data.substr(19, 1), 10);\n    this.year = 2000 + parseInt(this.data.substr(20, 2), 10);\n  }\n}\n","import ElkResponse from './ElkResponse';\n\nconst SPLIT_CHUNKS_REGEX = /.{1,3}/g;\n\n/**\n * Reply Temperature Data\n *\n * @see 4.24.2 Reply Temperature Data (LW)\n */\nexport default class TemperatureData extends ElkResponse {\n  static readonly COMMAND = 'LW';\n\n  readonly keypadTemperatures: number[];\n  readonly zoneTemperatures: number[];\n\n  constructor(raw: string) {\n    super(raw);\n\n    const keypadMatches = this.data.substr(0, 3 * 16).match(SPLIT_CHUNKS_REGEX);\n    const zoneMatches = this.data.substr(3 * 16).match(SPLIT_CHUNKS_REGEX);\n\n    this.keypadTemperatures = keypadMatches\n      ? keypadMatches.map(temp => parseInt(temp, 10) - 40)\n      : [];\n    this.zoneTemperatures = zoneMatches ? zoneMatches.map(temp => parseInt(temp, 10) - 60) : [];\n  }\n\n  getKeypadTemperature(keypadNumber: number) {\n    return this.keypadTemperatures[keypadNumber - 1];\n  }\n\n  getZoneSensorTemperature(zoneNumber: number) {\n    return this.zoneTemperatures[zoneNumber - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * PLC Change Update\n *\n * Special: When an AllLightsOn, AllLightsOff, or AllUnitsOff\n * command is transmitted the Unit Code will equal 00, and the Level (LL)\n * will be:\n * * AllLightsOn = 02\n * * AllLightsOff = 07\n * * AllUnitsOff = 01\n *\n * This transmission update option transmits the updated status whenever\n * it changes and is enabled by setting the location TRUE in the M1\n * Control Global Programming Location 39.\n * Example: “Xmit Light Chgs– ASCII” (Yes or No)\n *\n * @see 4.25.2 PLC Change Update (PC)\n */\nexport default class PlcChangeUpdate extends ElkResponse {\n  static readonly COMMAND = 'PC';\n\n  readonly houseCode: string;\n  readonly unitCode: number;\n  readonly level: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.houseCode = this.data[0];\n    this.unitCode = parseInt(this.data.substr(1, 2), 10);\n    this.level = parseInt(this.data.substr(3, 2), 10);\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Returned PLC status\n *\n * @see 4.25.6 Returned PLC status (PS)\n */\nexport default class PlcDeviceStatusReply extends ElkResponse {\n  static readonly COMMAND = 'PS';\n\n  readonly bank: number;\n  readonly levels: number[];\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.bank = parseInt(this.data[0], 10);\n    this.levels = Array.from(this.data.substr(1, 64)).map(value => parseInt(value, 10));\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reset Ethernet Module\n *\n * This command is originated from the M1 and causes the M1XEP\n * Ethernet Module to reset its processor and/or its IP address\n * to: 192.168.0.251. This can be used when the IP address of the\n * M1XEP is set to an unknown value. This is accessed through the\n * M1’s Keypad Global Installer Programming, Option 45, then enter\n * 96. M1 Version 4.3.7 and after.\n *\n * @see 4.26 Reset Ethernet Module (RE)\n */\nexport default class EthernetModuleReset extends ElkResponse {\n  static readonly COMMAND = 'RE';\n\n  readonly isIpAddressReset: boolean;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.isIpAddressReset = this.data[0] === '1';\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * ELKRP software Connected\n *\n * The M1XEP sends the following ASCII command out to\n * all socket connected devices when ELK RP,\n * Upload/Download Software, disconnects from the M1\n *\n * @see 4.27 ELKRP Connected (RP)\n */\nexport default class ElkRPConnected extends ElkResponse {\n  static readonly COMMAND = 'RP';\n\n  readonly connectMessageType: string;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.connectMessageType = this.data[1];\n  }\n\n  get isDisconnectBroadcast() {\n    return this.connectMessageType === '0';\n  }\n\n  get isPollReply() {\n    return this.connectMessageType === '1';\n  }\n\n  get isInitializing() {\n    return this.connectMessageType === '2';\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport DayOfWeek from '../../enums/DayOfWeek';\nimport MonthOfYear from '../../enums/MonthOfYear';\n\n/**\n * Reply Real Time Clock Data\n *\n * @see 4.28.2 Reply Real Time Clock Data (RR)\n */\nexport default class RealTimeClockDataReply extends ElkResponse {\n  static readonly COMMAND = 'RR';\n\n  readonly seconds: number;\n  readonly minutes: number;\n  readonly hour: number;\n  readonly dayOfWeek: DayOfWeek;\n  readonly dayOfMonth: number;\n  readonly monthOfYear: MonthOfYear;\n  readonly year: number;\n\n  /**\n   * True if daylight savings time is currently active; Otherwise, false.\n   */\n  readonly isDst: boolean;\n\n  /**\n   * True if the system is using 12-hour clock mode.\n   */\n  readonly is12hourClockMode: boolean;\n\n  /**\n   * True if the date display mode is \"dd/mm\"; fale if it is \"mm/dd\"\n   */\n  readonly isDateModeDayFirst: boolean;\n\n  /**\n   * A date object representing the control's realtime clock values.\n   */\n  readonly date: Date;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.seconds = parseInt(this.data.substr(0, 2), 10);\n    this.minutes = parseInt(this.data.substr(2, 2), 10);\n    this.hour = parseInt(this.data.substr(4, 2), 10);\n    this.dayOfWeek = parseInt(this.data.substr(6, 1), 10);\n    this.dayOfMonth = parseInt(this.data.substr(7, 2), 10);\n    this.monthOfYear = parseInt(this.data.substr(9, 2), 10);\n    this.year = 2000 + parseInt(this.data.substr(11, 2), 10);\n    this.isDst = this.data.substr(13, 1) === '1';\n    this.is12hourClockMode = this.data.substr(14, 1) === '1';\n    this.isDateModeDayFirst = this.data.substr(15, 1) === '1';\n\n    // TODO: What to do with this? I'm not sure we have any way of\n    // know which timezone we're dealing with. And it's not UTC.\n    this.date = new Date(\n      Date.UTC(\n        this.year,\n        this.monthOfYear - 1, // JavaScript uses 0-based months.\n        this.dayOfMonth,\n        this.hour,\n        this.minutes,\n        this.seconds\n      )\n    );\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport TextDescriptionType from '../../enums/TextDescriptionType';\n\n/**\n * Reply With ASCII String Text Descriptions\n *\n * Sent as a response to {@link TextDescriptionRequest}\n *\n * @see 4.29.2 Reply With ASCII String Text Descriptions (SD)\n */\nexport default class TextDescriptionReply extends ElkResponse {\n  static readonly COMMAND = 'SD';\n\n  readonly textType: TextDescriptionType;\n  readonly address: number;\n  readonly text: string;\n\n  constructor(raw: string) {\n    super(raw);\n    this.textType = parseInt(this.data.substr(0, 2), 10);\n    this.address = parseInt(this.data.substr(2, 3), 10);\n    this.text = this.data.substr(5, 16).trim();\n\n    if (this.text.charCodeAt(0) > 127) {\n      // Note: The high bit of the first character in the text string may be set as the\n      // “Show On Keypad” bit. Mask out the high bit for proper ASCII display.\n      this.text = String.fromCharCode(this.text.charCodeAt(0) - 128) + this.text.substr(1);\n    }\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport SystemTroubleType from '../../enums/SystemTroubleType';\n\n/**\n * Reply System Trouble Status\n *\n * This command allows automation equipment to poll\n * for system trouble status. Firmware revision 4.5.4,\n * 5.1.4 and after. This message will automatically\n * be sent upon a trouble status change.\n *\n * @see 4.30.2 Reply System Trouble Status (SS)\n */\nexport default class SystemTroubleStatusReply extends ElkResponse {\n  static readonly COMMAND = 'SS';\n\n  readonly troubles: SystemTroubleType = SystemTroubleType.None;\n  readonly boxTamperTroubleZone?: number;\n  readonly transmitterLowBatteryTroubleZone?: number;\n  readonly securityAlertTroubleZone?: number;\n  readonly lostTransmitterTroubleZone?: number;\n  readonly fireTroubleZone?: number;\n\n  constructor(raw: string) {\n    super(raw);\n\n    if (this.data[0] === '1') {\n      this.troubles |= SystemTroubleType.ACFail;\n    }\n\n    if (this.data[1] !== '0') {\n      this.troubles |= SystemTroubleType.BoxTamper;\n      this.boxTamperTroubleZone = this.data.charCodeAt(1) - 48;\n    }\n\n    if (this.data[2] === '1') {\n      this.troubles |= SystemTroubleType.FailToCommunicate;\n    }\n\n    if (this.data[3] === '1') {\n      this.troubles |= SystemTroubleType.EEPromMemoryError;\n    }\n\n    if (this.data[4] === '1') {\n      this.troubles |= SystemTroubleType.LowBatteryControl;\n    }\n\n    if (this.data[5] !== '0') {\n      this.troubles |= SystemTroubleType.TransmitterLowBattery;\n      this.transmitterLowBatteryTroubleZone = this.data.charCodeAt(5) - 48;\n    }\n\n    if (this.data[6] === '1') {\n      this.troubles |= SystemTroubleType.OverCurrent;\n    }\n\n    if (this.data[7] === '1') {\n      this.troubles |= SystemTroubleType.TelephoneFault;\n    }\n\n    if (this.data[9] === '1') {\n      this.troubles |= SystemTroubleType.Output2;\n    }\n\n    if (this.data[10] === '1') {\n      this.troubles |= SystemTroubleType.MissingKeypad;\n    }\n\n    if (this.data[11] === '1') {\n      this.troubles |= SystemTroubleType.ZoneExpander;\n    }\n\n    if (this.data[12] === '1') {\n      this.troubles |= SystemTroubleType.OutputExpander;\n    }\n\n    if (this.data[14] === '1') {\n      this.troubles |= SystemTroubleType.ELKRPRemoteAccess;\n    }\n\n    if (this.data[16] === '1') {\n      this.troubles |= SystemTroubleType.CommonAreaNotArmed;\n    }\n\n    if (this.data[17] === '1') {\n      this.troubles |= SystemTroubleType.FlashMemoryError;\n    }\n\n    if (this.data[18] !== '0') {\n      this.troubles |= SystemTroubleType.SecurityAlert;\n      this.securityAlertTroubleZone = this.data.charCodeAt(18) - 48;\n    }\n\n    if (this.data[19] === '1') {\n      this.troubles |= SystemTroubleType.SerialPortExpander;\n    }\n\n    if (this.data[20] !== '0') {\n      this.troubles |= SystemTroubleType.LostTransmitter;\n      this.lostTransmitterTroubleZone = this.data.charCodeAt(20) - 48;\n    }\n\n    if (this.data[21] === '1') {\n      this.troubles |= SystemTroubleType.GESmokeCleanMe;\n    }\n\n    if (this.data[22] === '1') {\n      this.troubles |= SystemTroubleType.EthernetTrouble;\n    }\n\n    if (this.data[31] === '1') {\n      this.troubles |= SystemTroubleType.DisplayMessageInKeypadLine1;\n    }\n\n    if (this.data[32] === '1') {\n      this.troubles |= SystemTroubleType.DisplayMessageInKeypadLine2;\n    }\n\n    if (this.data[33] !== '0') {\n      this.troubles |= SystemTroubleType.FireTrouble;\n      this.fireTroubleZone = this.data.charCodeAt(33) - 48;\n    }\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport TemperatureDeviceType from '../../enums/TemperatureDeviceType';\n\n/**\n * Reply With Requested Temperature\n *\n * @see 4.31.2 Reply With Requested Temperature (ST)\n */\nexport default class TemperatureReply extends ElkResponse {\n  static readonly COMMAND = 'ST';\n\n  readonly deviceType: TemperatureDeviceType;\n  readonly deviceNumber: number;\n  readonly temperature: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.deviceType = parseInt(this.data.substr(0, 1), 10);\n    this.deviceNumber = parseInt(this.data.substr(1, 2), 10);\n    this.temperature = parseInt(this.data.substr(3, 3), 10);\n\n    if (this.deviceType === TemperatureDeviceType.TemperatureProbe) {\n      this.temperature -= 60;\n    } else if (this.deviceType === TemperatureDeviceType.Keypad) {\n      this.temperature -= 40;\n    }\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Tasks Change Update\n *\n * This transmission update option transmits the updated status whenever\n * it changes and is enabled by setting the location TRUE in the M1 Control\n * Global Programming Location 38. Example: “Xmit Task Chgs – ASCII” (Yes\n * or No)\n *\n * @see 4.33 Tasks Change Update (TC)\n */\nexport default class TaskChangeUpdate extends ElkResponse {\n  static readonly COMMAND = 'TC';\n\n  readonly taskNNumber: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.taskNNumber = parseInt(this.data.substr(0, 3), 10);\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport ThermostatMode from '../../enums/ThermostatMode';\n\n/**\n * Reply Thermostat Data\n *\n * @see 4.35.2 Reply Thermostat Data (TR)\n */\nexport default class ThermostatData extends ElkResponse {\n  static readonly COMMAND = 'TR';\n\n  readonly thermostatNumber: number;\n  readonly thermostatMode: ThermostatMode;\n  readonly thermostatHold: boolean;\n  readonly thermostatFanOn: boolean;\n  readonly temperature?: number;\n  readonly heatSetPoint?: number;\n  readonly coolSetPoint?: number;\n  readonly humidity?: number;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.thermostatNumber = parseInt(this.data.substr(0, 2), 10);\n    this.thermostatMode = this.data.charCodeAt(2);\n    this.thermostatHold = this.data[3] === '1';\n    this.thermostatFanOn = this.data[4] === '1';\n    this.temperature = parseInt(this.data.substr(5, 2), 10) || undefined;\n    this.heatSetPoint = parseInt(this.data.substr(7, 2), 10) || undefined;\n    this.coolSetPoint = parseInt(this.data.substr(9, 2), 10) || undefined;\n    this.humidity = parseInt(this.data.substr(11, 2), 10) || undefined;\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reply - M1 to PC with Omnistat 2 ASCII Hex data\n *\n * This is the reply from the M1XSP connected to the HAI Omnistat\n * 2 HVAC Thermostat. M1 version 5.1.9 or later is required for\n * this command.\n *\n * @see 4.35.5 Reply - M1 to PC with Omnistat 2 ASCII Hex data (T2)\n */\nexport default class Omnistat2Reply extends ElkResponse {\n  static readonly COMMAND = 'T2';\n}\n","import ElkResponse from './ElkResponse';\n\nfunction versionsToString(major: number, minor: number, patch: number) {\n  return `${major.toString().padStart(2, '0')}.${minor\n    .toString()\n    .padStart(2, '0')}.${patch.toString().padStart(2, '0')}`;\n}\n\n/**\n * Reply M1 Version Number\n *\n * Response to {@link VersionNumberRequest}\n *\n * @see 4.36.2 Reply M1 Version Number (VN)\n */\nexport default class VersionNumberReply extends ElkResponse {\n  static readonly COMMAND = 'VN';\n\n  readonly m1Major: number;\n  readonly m1Minor: number;\n  readonly m1Patch: number;\n  readonly m1xepMajor: number;\n  readonly m1xepMinor: number;\n  readonly m1xepPatch: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.m1Major = parseInt(this.data.substr(0, 2), 16);\n    this.m1Minor = parseInt(this.data.substr(2, 2), 16);\n    this.m1Patch = parseInt(this.data.substr(4, 2), 16);\n    this.m1xepMajor = parseInt(this.data.substr(6, 2), 16);\n    this.m1xepMinor = parseInt(this.data.substr(8, 2), 16);\n    this.m1xepPatch = parseInt(this.data.substr(10, 2), 16);\n  }\n\n  get m1Version() {\n    return versionsToString(this.m1Major, this.m1Minor, this.m1Patch);\n  }\n\n  get m1XepVersion() {\n    return versionsToString(this.m1xepMajor, this.m1xepMinor, this.m1xepPatch);\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport UserCodeType from '../../enums/UserCodeType';\n\n/**\n * Reply With Valid User Code Areas\n *\n * @see 4.37.2 Reply With Valid User Code Areas (UA)\n */\nexport default class UserCodeAreasReply extends ElkResponse {\n  static readonly COMMAND = 'UA';\n\n  readonly userCode: string;\n  readonly diagnosticData: string;\n  readonly userCodeLength: number;\n  readonly userCodeType: UserCodeType;\n  readonly temperatureMode: string;\n  readonly areas: boolean[];\n\n  constructor(raw: string) {\n    super(raw);\n    this.userCode = this.data.substr(0, 6);\n    const areaBits = parseInt(this.data.substr(6, 2), 16).toString(2);\n    this.areas = Array.from(areaBits).map(bit => bit === '1');\n    this.diagnosticData = this.data.substr(8, 8);\n    this.userCodeLength = parseInt(this.data.substr(16, 1), 10);\n    this.userCodeType = this.data.charCodeAt(17);\n    this.temperatureMode = this.data[18];\n  }\n\n  isValidForArea(areaNumber: number) {\n    return this.areas[areaNumber - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * This message is used to inform User Interfaces that an alarm\n * memory is present and must be cleared before an arm command will arm the system.\n *\n * @see 4.38 Alarm Memory Update (AM)\n */\nexport default class AlarmMemoryUpdate extends ElkResponse {\n  static readonly COMMAND = 'AM';\n\n  /**\n   * An array containing the alarm memory status of each area.\n   * If the value is true, there is an alarm memory present for\n   * the area. Index 0 indicates area 1's alarm memory status,\n   * index 1 indicates area 2's alarm memory status, etc.\n   */\n  readonly areas: boolean[];\n\n  constructor(raw: string) {\n    super(raw);\n\n    // The alarm memory response uses the reserved characters as\n    // part of it's data (or depending on how you look at it,\n    // doesn't *have* the reserved characters.\n    const data = this.data + this.reserved;\n    this.areas = Array.from(data.substr(0, 8)).map(char => char === '1');\n  }\n\n  /**\n   * Returns a value indicating whether there is an alarm memory\n   * present in the given area.\n   * @param areaNumber The area number (1..8)\n   */\n  isAlarmMemoryPresent(areaNumber: number) {\n    return this.areas[areaNumber - 1];\n  }\n}\n","import ZonePhysicalState from '../enums/ZonePhysicalState';\nimport ZoneLogicalState from '../enums/ZoneLogicalState';\n\nexport default class ZoneStatus {\n  static parse(hexValue: string) {\n    const statusBits = parseInt(hexValue, 16)\n      .toString(2)\n      .padStart(4, '0');\n    const logicalState = parseInt(statusBits.substr(0, 2), 2);\n    const physicalState = parseInt(statusBits.substr(2, 2), 2);\n    return new ZoneStatus(logicalState, physicalState);\n  }\n\n  readonly hexValue: string;\n\n  constructor(readonly logicalState: ZoneLogicalState, readonly physicalState: ZonePhysicalState) {\n    this.hexValue = parseInt(\n      logicalState.toString(2).padStart(2, '0') + physicalState.toString(2).padStart(2, '0'),\n      2\n    )\n      .toString(16)\n      .toUpperCase();\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport ZoneStatus from '../../models/ZoneStatus';\n\n/**\n * Zone Change Update\n *\n * This transmission update option transmits the updated status\n * whenever it changes and is enabled by setting the location\n * TRUE in the M1 Control Global Programming Location 36.\n * Example: “Xmit Zone Chgs–ASCII” (Yes or No)\n *\n * @see 4.39 Zone Change Update (ZC)\n */\nexport default class ZoneChangeUpdate extends ElkResponse {\n  static readonly COMMAND = 'ZC';\n\n  readonly zoneNumber: number;\n  readonly zoneStatus: ZoneStatus;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.zoneNumber = parseInt(this.data.substr(0, 3), 10);\n    this.zoneStatus = ZoneStatus.parse(this.data[3]);\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reply With Bypassed Zone State\n *\n * @see 4.40.2 Reply With Bypassed Zone State (ZB)\n */\nexport default class ZoneBypassReply extends ElkResponse {\n  static readonly COMMAND = 'ZB';\n\n  readonly zoneNumber: number;\n  readonly isBypassed: boolean;\n\n  constructor(raw: string) {\n    super(raw);\n    this.zoneNumber = parseInt(this.data.substr(0, 3), 10);\n    this.isBypassed = this.data[3] === '1';\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Zone Partition Report\n *\n * The control panel sends this message in response to a\n * Zone Partition Request. The data portion, D, of this\n * message is 208 characters long, one character for each\n * zone in order. The value will be from 1-8.\n *\n * @see 4.40.4 Zone Partition Report (ZP)\n */\nexport default class ZonePartitionReport extends ElkResponse {\n  static readonly COMMAND = 'ZP';\n\n  readonly zonePartitions: number[];\n\n  constructor(raw: string) {\n    super(raw);\n    this.zonePartitions = Array.from(this.data).map(char => parseInt(char, 10));\n  }\n\n  getZoneArea(zoneNumber: number) {\n    return this.zonePartitions[zoneNumber - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\nimport ZoneStatus from '../../models/ZoneStatus';\n\n/**\n * Zone Status Report\n *\n * The control panel sends this message in response\n * to a Zone Status Request. The data portion of this\n * message is 208 characters long, one character for\n * each zone in order. Each character is the sum of\n * all applicable status values, expressed in hexadecimal,\n * using ASCII characters 0-9 and A-F.\n * @see 4.40.6 Zone Status Report (ZS)\n */\nexport default class ZoneStatusReport extends ElkResponse {\n  static readonly COMMAND = 'ZS';\n\n  readonly zoneStatuses: ZoneStatus[];\n\n  constructor(raw: string) {\n    super(raw);\n    this.zoneStatuses = Array.from(this.data).map(char => ZoneStatus.parse(char));\n  }\n\n  getZoneStatus(zoneNumber: number) {\n    return this.zoneStatuses[zoneNumber - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reply Zone Definition Data\n *\n * @see 4.41.2 Reply Zone Definition Data (ZD)\n */\nexport default class ZoneDefinitionData extends ElkResponse {\n  static readonly COMMAND = 'ZD';\n\n  readonly zoneDefinitions: number[];\n\n  constructor(raw: string) {\n    super(raw);\n    this.zoneDefinitions = Array.from(this.data).map(char => char.charCodeAt(0));\n  }\n\n  getZoneDefinition(zoneNumber: number) {\n    return this.zoneDefinitions[zoneNumber - 1];\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reply Zone Analog Voltage Data\n *\n * @see 4.43.2 Reply Zone Analog Voltage Data (ZV)\n */\nexport default class ZoneVoltageData extends ElkResponse {\n  static readonly COMMAND = 'ZV';\n\n  readonly zoneNumber: number;\n  readonly zoneVoltage: number;\n\n  constructor(raw: string) {\n    super(raw);\n    this.zoneNumber = parseInt(this.data.substr(0, 3), 10);\n    this.zoneVoltage = parseInt(this.data.substr(3, 3), 10) / 10;\n  }\n}\n","import ElkResponse from './ElkResponse';\n\n/**\n * Reply Programming Of Insteon Lighting Device Data\n *\n * Note: Insteon Lighting Device 193 to 256 corresponds to\n * Insteon Groups 1 – 64.\n *\n * @see 4.44 Reply Programming Of Insteon Lighting Device Data (IP)\n */\nexport default class InsteonLightingDeviceProgrammed extends ElkResponse {\n  static readonly COMMAND = 'IP';\n\n  readonly startingDeviceNumber: number;\n  readonly deviceCount: number;\n\n  constructor(raw: string) {\n    super(raw);\n\n    this.startingDeviceNumber = parseInt(this.data.substr(0, 3), 10);\n    this.deviceCount = parseInt(this.data.substr(3, 1), 10);\n  }\n\n  get endingDeviceNumber() {\n    return this.startingDeviceNumber + this.deviceCount - 1;\n  }\n}\n","import ElkMessage from './ElkMessage';\nimport ElkResponse from './responses/ElkResponse';\nimport UnknownElkResponse from './responses/UnknownElkResponse';\nimport ArmingStatusReport from './responses/ArmingStatusReport';\nimport SendASCIIStringToIPAddress from './responses/SendASCIIStringToIPAddress';\nimport AlarmReport from './responses/AlarmReport';\nimport AlarmReportTest from './responses/AlarmReportTest';\nimport EthernetModuleTest from './responses/EthernetModuleTest';\nimport AlarmByZoneReport from './responses/AlarmByZoneReport';\nimport AudioDataReply from './responses/AudioDataReply';\nimport OutputChangeUpdate from './responses/OutputChangeUpdate';\nimport AudioCommandOutgoing from './responses/AudioCommandOutgoing';\nimport ControlOutputStatusReport from './responses/ControlOutputStatusReport';\nimport CustomValueReply from './responses/CustomValueReply';\nimport UserCodeChangeReply from './responses/UserCodeChangeReply';\nimport CounterValueReply from './responses/CounterValueReply';\nimport LightingDeviceDataReply from './responses/LightingDeviceDataReply';\nimport EntryExitTimer from './responses/EntryExitTimer';\nimport EmailSendTrigger from './responses/EmailSendTrigger';\nimport UserCodeEntry from './responses/UserCodeEntry';\nimport InstallerModeExited from './responses/InstallerModeExited';\nimport InsteonLightingDeviceStatusReply from './responses/InsteonLightingDeviceStatusReply';\nimport KeypadAreaAssignments from './responses/KeypadAreaAssignments';\nimport KeypadKeyChange from './responses/KeypadKeyChange';\nimport KeypadFunctionKeyPressReply from './responses/KeypadFunctionKeyPressReply';\nimport SystemLogDataUpdate from './responses/SystemLogDataUpdate';\nimport TemperatureData from './responses/TemperatureData';\nimport PlcChangeUpdate from './responses/PlcChangeUpdate';\nimport PlcDeviceStatusReply from './responses/PlcDeviceStatusReply';\nimport EthernetModuleReset from './responses/EthernetModuleReset';\nimport ElkRPConnected from './responses/ElkRPConnected';\nimport RealTimeClockDataReply from './responses/RealTimeClockDataReply';\nimport TextDescriptionReply from './responses/TextDescriptionReply';\nimport SystemTroubleStatusReply from './responses/SystemTroubleStatusReply';\nimport TemperatureReply from './responses/TemperatureReply';\nimport TaskChangeUpdate from './responses/TaskChangeUpdate';\nimport ThermostatData from './responses/ThermostatData';\nimport Omnistat2Reply from './responses/Omnistat2Reply';\nimport VersionNumberReply from './responses/VersionNumberReply';\nimport UserCodeAreasReply from './responses/UserCodeAreasReply';\nimport AlarmMemoryUpdate from './responses/AlarmMemoryUpdate';\nimport ZoneChangeUpdate from './responses/ZoneChangeUpdate';\nimport ZoneBypassReply from './responses/ZoneBypassReply';\nimport ZonePartitionReport from './responses/ZonePartitionReport';\nimport ZoneStatusReport from './responses/ZoneStatusReport';\nimport ZoneDefinitionData from './responses/ZoneDefinitionData';\nimport ZoneVoltageData from './responses/ZoneVoltageData';\nimport InsteonLightingDeviceProgrammed from './responses/InsteonLightingDeviceProgrammed';\n\nconst RESPONSE_MAP: { [index: string]: typeof ElkResponse } = {\n  [ArmingStatusReport.COMMAND]: ArmingStatusReport, // 4.2.13\n  [SendASCIIStringToIPAddress.COMMAND]: SendASCIIStringToIPAddress, // 4.2.13\n  [AlarmReport.COMMAND]: AlarmReport, // 4.4.1\n  [AlarmReportTest.COMMAND]: AlarmReportTest, // 4.4.3\n  [EthernetModuleTest.COMMAND]: EthernetModuleTest, // 4.4.5\n  [AlarmByZoneReport.COMMAND]: AlarmByZoneReport, // 4.5.1\n  [AudioDataReply.COMMAND]: AudioDataReply, // 4.6.2\n  [OutputChangeUpdate.COMMAND]: OutputChangeUpdate, // 4.7\n  [AudioCommandOutgoing.COMMAND]: AudioCommandOutgoing, // 4.8.3\n  [ControlOutputStatusReport.COMMAND]: ControlOutputStatusReport, // 4.9.4\n  [CustomValueReply.COMMAND]: CustomValueReply, // 4.10.3\n  [UserCodeChangeReply.COMMAND]: UserCodeChangeReply, // 4.11.2\n  [CounterValueReply.COMMAND]: CounterValueReply, // 4.12.3\n  [LightingDeviceDataReply.COMMAND]: LightingDeviceDataReply, // 4.14.2\n  [EntryExitTimer.COMMAND]: EntryExitTimer, // 4.15.1\n  [EmailSendTrigger.COMMAND]: EmailSendTrigger, // 4.16.1\n  [UserCodeEntry.COMMAND]: UserCodeEntry, // 4.17.1\n  [InstallerModeExited.COMMAND]: InstallerModeExited, // 4.18.1\n  [InsteonLightingDeviceStatusReply.COMMAND]: InsteonLightingDeviceStatusReply, // 4.19.4\n  [KeypadAreaAssignments.COMMAND]: KeypadAreaAssignments, // 4.20.2\n  [KeypadKeyChange.COMMAND]: KeypadKeyChange, // 4.21\n  [KeypadFunctionKeyPressReply.COMMAND]: KeypadFunctionKeyPressReply, // 4.22.2\n  [SystemLogDataUpdate.COMMAND]: SystemLogDataUpdate, // 4.23\n  [TemperatureData.COMMAND]: TemperatureData, // 4.24.2\n  [PlcChangeUpdate.COMMAND]: PlcChangeUpdate, // 4.25.2\n  [PlcDeviceStatusReply.COMMAND]: PlcDeviceStatusReply, // 4.25.6\n  [EthernetModuleReset.COMMAND]: EthernetModuleReset, // 4.26.1\n  [ElkRPConnected.COMMAND]: ElkRPConnected, // 4.27\n  [RealTimeClockDataReply.COMMAND]: RealTimeClockDataReply, // 4.28.2\n  [TextDescriptionReply.COMMAND]: TextDescriptionReply, // 4.29.2\n  [SystemTroubleStatusReply.COMMAND]: SystemTroubleStatusReply, // 4.30.2\n  [TemperatureReply.COMMAND]: TemperatureReply, // 4.31.2\n  [TaskChangeUpdate.COMMAND]: TaskChangeUpdate, // 4.33\n  [ThermostatData.COMMAND]: ThermostatData, // 4.35.2\n  [Omnistat2Reply.COMMAND]: Omnistat2Reply, // 4.35.5\n  [VersionNumberReply.COMMAND]: VersionNumberReply, // 4.36.2\n  [UserCodeAreasReply.COMMAND]: UserCodeAreasReply, // 4.37.2\n  [AlarmMemoryUpdate.COMMAND]: AlarmMemoryUpdate, // 4.38\n  [ZoneChangeUpdate.COMMAND]: ZoneChangeUpdate, // 4.39\n  [ZoneBypassReply.COMMAND]: ZoneBypassReply, // 4.40.2\n  [ZonePartitionReport.COMMAND]: ZonePartitionReport, // 4.40.4\n  [ZoneStatusReport.COMMAND]: ZoneStatusReport, // 4.40.6\n  [ZoneDefinitionData.COMMAND]: ZoneDefinitionData, // 4.41\n  [ZoneVoltageData.COMMAND]: ZoneVoltageData, // 4.43.2\n  [InsteonLightingDeviceProgrammed.COMMAND]: InsteonLightingDeviceProgrammed // 4.44\n};\n\nexport default function parse(raw: string): ElkMessage {\n  const command = raw.substr(2, 2);\n  const ResponseClass = RESPONSE_MAP[command] || UnknownElkResponse;\n  return new ResponseClass(raw);\n}\n","import ElkMessage from '../ElkMessage';\nimport numberToHex from '../../util/numberToHex';\nimport calculateChecksum from '../../util/calculateChecksum';\nimport { PACKET_LENGTH_WIDTH, RESERVED_DEFAULT, TERMINATOR } from '../constants';\n\n/**\n * A message that is sent to the Elk M1\n */\nexport default abstract class ElkCommand implements ElkMessage {\n  constructor(\n    readonly messageType: string,\n    readonly subMessageType: string,\n    readonly data: string = ''\n  ) {}\n\n  get raw(): string {\n    const message = `${this.command}${this.data || ''}${this.reserved || RESERVED_DEFAULT}`;\n    const packetLength = numberToHex(message.length + 2, PACKET_LENGTH_WIDTH);\n    const checksum = calculateChecksum(`${packetLength}${message}`);\n    return `${packetLength}${message}${checksum}${TERMINATOR}`;\n  }\n\n  get command(): string {\n    return this.messageType + this.subMessageType;\n  }\n\n  get reserved(): string {\n    return RESERVED_DEFAULT;\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * 4.5 Alarm By Zone Request (az)\n *\n * Request alarm by zone\n *\n * The control panel responds to this message with a\n * {@link AlarmByZoneReport}\n */\nexport default class AlarmByZoneRequest extends ElkCommand {\n  constructor() {\n    super('a', 'z');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Alarm Report Acknowledge\n *\n * The Ethernet Module (M1XEP) will acknowledge the M1’s Alarm Report\n * transmission with the reply: 06ar0067<cr><lf>. This acknowledge\n * is sent to the M1 only if the central station’s server acknowledges\n * the Ethernet Module’s data packet.\n *\n * @see 4.4.2 Alarm Report Acknowledge (ar)\n */\nexport default class AlarmReportAcknowledge extends ElkCommand {\n  constructor() {\n    super('a', 'r');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Alarm Reporting Test Acknowledge\n *\n * If the Alarm Reporting Test if successful to the central station’s IP\n * address the Acknowledge message will be sent to the M1 from the\n * M1XEP: 06at0065<cr><lf>.\n *\n * @see 4.4.4 Alarm Reporting Test Acknowledge (at)\n */\nexport default class AlarmReportTestAcknowledge extends ElkCommand {\n  constructor() {\n    super('a', 't');\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport ArmingLevel from '../../enums/ArmingLevel';\n\n/**\n * Arm or disarm an area.\n *\n * Note: Arming the control panel with zones open\n * will initiate “force arming” regardless of whether\n * force arming is enabled or disabled in the control panel.\n *\n * @see 4.2 Arm and Disarm Messages (a0..a8)\n */\nexport default class Arm extends ElkCommand {\n  /**\n   * @param armingLevel The arming level desired\n   * @param areaNumber The area to be armed or disarmed\n   * @param userCode The user code (a string of 4 or 6 digits)\n   */\n  constructor(\n    readonly armingLevel: ArmingLevel,\n    readonly areaNumber: number,\n    readonly userCode: string\n  ) {\n    super('a', String.fromCharCode(armingLevel), areaNumber + userCode.padStart(6, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Requests current arming status for all areas.\n *\n * The control panel responds to this message with a {@link ArmingStatusReport}\n *\n * @see 4.2.12 Arming Status Request (as)\n */\nexport default class ArmingStatusRequest extends ElkCommand {\n  constructor() {\n    super('a', 's');\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport AudioCommand from '../../enums/AudioCommand';\n\n/**\n * Incoming Audio Command\n *\n * An M1XEP Ethernet Module is required to intercept the “cd” command.\n * These commands are sent into the M1XEP via the Ethernet connection\n * and passed through to the M1. The M1XEP builds custom audio commands\n * to control the audio equipment and sends these commands to the audio\n * equipment via ethernet. An IP232 Ethernet Module may be required at\n * the audio equipment to received the commands if no Ethernet Port is\n * available on the audio equipment. The incoming “cd” command can\n * trigger Rules in the M1 which can fire outgoing audio equipment\n * “CD” commands or other control Rules. ELKRP downloads the Audio\n * Equipment Command tables into the M1XEP according to the Audio\n * Equipment Manufacturer. M1 version 4.1.11, 5.1.11 or later is required.\n *\n * @see 4.8.1 Incoming Audio Command (cd)\n */\nexport default class AudioCommandIncoming extends ElkCommand {\n  constructor(\n    readonly audioCommand: AudioCommand,\n    readonly audioSource: number,\n    readonly audioZone: number,\n    readonly value: number = 0\n  ) {\n    super(\n      'c',\n      'd',\n      audioCommand.toString().padStart(2, '0') +\n        audioSource.toString().padStart(2, '0') +\n        audioZone.toString().padStart(2, '0') +\n        value.toString().padStart(3, '0')\n    );\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Audio Data\n *\n * The control panel responds to this message with a {@link AudioDataReply}\n *\n * @see 4.6.1 Request Audio Data (ca)\n */\nexport default class AudioDataRequest extends ElkCommand {\n  constructor(readonly zoneNumber: number) {\n    super('c', 'a', zoneNumber.toString().padStart(2, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Control Output off\n *\n * @see 4.9.1 Control Output off (cf)\n */\nexport default class ControlOutputOff extends ElkCommand {\n  constructor(readonly output: number) {\n    super('c', 'f', output.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Control Output On\n *\n * @see 4.9.2 Control Output On (cn)\n */\nexport default class ControlOutputOn extends ElkCommand {\n  constructor(readonly output: number, readonly duration: number = 0) {\n    super('c', 'n', output.toString().padStart(3, '0') + duration.toString().padStart(5, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Control Output Status Request\n *\n * The control panel responds with a {@link ControlOutputStatusReport} Report for all 208 outputs.\n *\n * @see 4.9.3 Control Output Status Request (cs)\n */\nexport default class ControlOutputStatusRequest extends ElkCommand {\n  constructor() {\n    super('c', 's');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Control Output toggle\n *\n * @see 4.9.5 Control Output toggle (ct)\n */\nexport default class ControlOutputToggle extends ElkCommand {\n  constructor(readonly output: number) {\n    super('c', 't', output.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Read Counter Value\n *\n * The control responds with {@link CounterValueReply}\n *\n * @see 4.12.1 Read Counter Value (cv)\n */\nexport default class CounterValueRead extends ElkCommand {\n  constructor(readonly counterNumber: number) {\n    super('c', 'v', counterNumber.toString().padStart(2, '0'));\n\n    if (counterNumber < 1 || counterNumber > 64) {\n      throw new RangeError('Counter value number must be between 1 and 64');\n    }\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Write Counter Value\n *\n * @see 4.12.2 Write Counter Value (cx)\n */\nexport default class CounterValueWrite extends ElkCommand {\n  constructor(readonly counterNumber: number, readonly value: number) {\n    super('c', 'x', counterNumber.toString().padStart(2, '0') + value.toString().padStart(5, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Read Custom Value\n *\n * The control response with {@link CustomValueReply}\n *\n * @see 4.10.1 Read Custom Value (cr)\n */\nexport default class CustomValueRead extends ElkCommand {\n  constructor(readonly valueNumber: number) {\n    super('c', 'r', valueNumber.toString().padStart(2, '0'));\n\n    if (valueNumber < 0 || valueNumber > 20) {\n      throw new RangeError('Custom value number must be between 0 and 20');\n    }\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport CustomValue from '../../models/CustomValue';\n\n/**\n * Write Custom Value\n *\n * @see 4.10.5 Write Custom Value (cw)\n */\nexport default class CustomValueWrite extends ElkCommand {\n  constructor(readonly valueNumber: number, readonly value: CustomValue) {\n    super('c', 'w', valueNumber.toString().padStart(2, '0') + value.encode());\n\n    if (valueNumber < 0 || valueNumber > 20) {\n      throw new RangeError('Custom value number must be between 0 and 20');\n    }\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Read ALL Custom Values\n *\n * The control response with {@link CustomValueReply}\n *\n * @see 4.10.2 Read ALL Custom Values (cp)\n */\nexport default class CustomValuesReadAll extends ElkCommand {\n  constructor() {\n    super('c', 'p');\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport DisplayTextClearOption from '../../enums/DisplayTextClearOption';\n\nexport function encodeLineData(input?: string | null) {\n  // If there is no data, return the terminator and pad with dummy character.\n  if (!input || !input.length) {\n    return '^'.padEnd(16, 'x');\n  }\n\n  // If the input is less then the allowed length, add the terminator character\n  // and pad with dummy characters.\n  if (input.length < 16) {\n    return (input + '^').padEnd(16, 'x');\n  }\n\n  // Otherwise, make sure the input is limited to 16 characters.\n  return input.substr(0, 16);\n}\n\n/**\n * Display Text On LCD Screen of keypads\n *\n * This is a M1 received message to display ascii text on the bottom line\n * of the LCD display on the keypads in the area specified. Enter the line\n * terminator, “^”, as the ending character of the line display if less\n * than 16 characters are to be displayed. The message line, L1 or L2,\n * will need dummy characters to fill the rest of the line for 16\n * characters each line.\n *\n * @see 4.13 Display Text On LCD Screen (dm)\n */\nexport default class DisplayTextOnScreen extends ElkCommand {\n  constructor(\n    readonly areaNumber: number,\n    readonly firstLine: string | null = '',\n    readonly secondLine: string | null = '',\n    readonly clearOption: DisplayTextClearOption = !firstLine\n      ? DisplayTextClearOption.Clear\n      : DisplayTextClearOption.ClearWithStarKey,\n    readonly beep: boolean = true,\n    readonly timeout: number = 0\n  ) {\n    super(\n      'd',\n      'm',\n      areaNumber.toString() +\n        clearOption.toString() +\n        (beep ? '1' : '0') +\n        (timeout || 0).toString().padStart(5, '0') +\n        encodeLineData(firstLine) +\n        encodeLineData(secondLine)\n    );\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Ethernet Module Test Acknowledge\n *\n * If the Ethernet Module is alive, it will reply back to the M1\n * with: 06xk0057<cr><lf>.\n *\n * @see 4.4.6 Ethernet Module Test Acknowledge (xk)\n */\nexport default class EthernetModuleTestAcknowledge extends ElkCommand {\n  constructor() {\n    super('x', 'k');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Programming Of Insteon Lighting Device Data\n *\n * @see 4.19.5 Request Programming Of Insteon Lighting Device Data (ip)\n */\nexport default class InsteonLightingDeviceProgramRequest extends ElkCommand {\n  constructor(readonly startingDeviceNumber: number, readonly deviceIds: string[]) {\n    super(\n      'i',\n      'p',\n      startingDeviceNumber.toString().padStart(3, '0') +\n        deviceIds.length.toString() +\n        deviceIds.map(id => id.padStart(6, '0')).join('')\n    );\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Read Of Insteon Lighting Device Data\n *\n * This command allows the M1 to poll single light devices to obtain\n * their on, off, dim status. This will be an automatic command issued\n * from the M1 to the M1XSP Type modules that connect to lighting devices.\n * Note: Only single light devices can be polled for status. Groups and\n * scenes will not return valid data. Enable the “2 Way” Poll setting for\n * the device to be polled. M1 Version 4.3.9 and after. This command\n * cannot be used by automation equipment.\n *\n * @see 4.19.3 Request Read Of Insteon Lighting Device Data (ir)\n */\nexport default class InsteonLightingDeviceStatusRequest extends ElkCommand {\n  constructor(readonly startingDeviceNumber: number, readonly deviceCount: number) {\n    super('i', 'r', startingDeviceNumber.toString().padStart(3, '0') + deviceCount.toString());\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Keypad Area Assignment\n *\n * This request command allows automation equipment to request\n * the Areas that all keypads are assigned to. The return string\n * contains a 16 byte array with keypad 1’s area at array index\n * 0 and keypad 15’s area in array index 15. M1 Version 4.2.5 and after.\n *\n * @see 4.20.1 Request Keypad Area Assignment (ka)\n */\nexport default class KeypadAreaAssigmentsRequest extends ElkCommand {\n  constructor() {\n    super('k', 'a');\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport FunctionKey from '../../enums/FunctionKey';\n\n/**\n * Request Keypad Function Key Press\n *\n * This command simulates a function key being pressed on a keypad.\n * This will only be single key press even if the M1 Control is\n * programmed for double function key press. M1 Version 4.2.5 and\n * after.\n *\n * SilenceTroubleBeep (‘*’) key: M1 Version 4.2.6 and after\n * Chime (‘C’) key: M1 Version 4.3.2 and after.\n *\n * @see 4.22.1 Request Keypad Function Key Press (kf)\n */\nexport default class KeypadFunctionKeyPressRequest extends ElkCommand {\n  constructor(readonly keypadNumber: number, readonly functionKey: FunctionKey = FunctionKey.None) {\n    super('k', 'f', keypadNumber.toString().padStart(2, '0') + String.fromCharCode(functionKey));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Keypad Function Key Illumination Status\n *\n * The function key illumination request returns the Keypad KeyChange\n * Update (KC) data with the Key Number set to zero (0). This command\n * allows automation equipment to request the illumination status of\n * the keypad function keys for building virtual keypads on a PC.\n *\n * @see 4.21.1 Request Keypad Function Key Illumination Status (kc)\n */\nexport default class KeypadFunctionKeyStatusRequest extends ElkCommand {\n  constructor(readonly keypadNumber: number) {\n    super('k', 'c', keypadNumber.toString().padStart(2, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Lighting Device Status\n *\n * This command allows the M1 to poll single light devices to obtain\n * their on, off, dim status. This will be an automatic command issued\n * from the M1 to the M1XSP Type modules that connect to lighting devices.\n * Note: Only single light devices can be polled for status. Groups and\n * scenes will not return valid data. Enable the “2 Way” Poll setting for\n * the device to be polled. M1 Version 4.3.9 and after. This command\n * cannot be used by automation equipment.\n *\n * @see 4.14.1 Request Lighting Device Status (ds)\n */\nexport default class LightingDeviceStatusRequest extends ElkCommand {\n  constructor(readonly lightingDeviceNumber: number) {\n    super('d', 's', lightingDeviceNumber.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request - Omnistat 2 From PC to M1 ASCII Protocol\n *\n * This request command allows for requesting data from the M1XSP that\n * is connected to the HAI Omnistate 2 HVAC Thermostat. The Omnistat 2\n * protocol is required to build the ASCII command strings. M1 version\n * 5.1.9 or later is required for this command.\n *\n * @see 4.35.4 Request - Omnistat 2 From PC to M1 ASCII Protocol (t2)\n */\nexport default class Omnistat2Request extends ElkCommand {\n  constructor(readonly omnistatData: string) {\n    super('t', '2', omnistatData.padEnd(36, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport PlcFunctionCode from '../../enums/PlcFunctionCode';\n\n/**\n * Control Any PLC Device\n *\n * @see 4.25.1 Control Any PLC Device (pc)\n */\nexport default class PlcDeviceControl extends ElkCommand {\n  constructor(\n    readonly houseCode: string,\n    readonly unitCode: number,\n    readonly functionCode: PlcFunctionCode,\n    readonly extendedCode: number,\n    readonly onTime: number\n  ) {\n    super(\n      'p',\n      'c',\n      houseCode +\n        unitCode.toString().padStart(2, '0') +\n        functionCode.toString().padStart(2, '0') +\n        extendedCode.toString().padStart(2, '0') +\n        onTime.toString().padStart(4, '0')\n    );\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Turn OFF PLC Device\n *\n * @see 4.25.3 Turn OFF PLC Device (pf)\n */\nexport default class PlcDeviceOff extends ElkCommand {\n  constructor(readonly houseCode: string, readonly unitCode: number) {\n    super('p', 'f', houseCode + unitCode.toString().padStart(2, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Turn ON PLC Device\n *\n * @see 4.25.4 Turn ON PLC Device (pn)\n */\nexport default class PlcDeviceOn extends ElkCommand {\n  constructor(readonly houseCode: string, readonly unitCode: number) {\n    super('p', 'n', houseCode + unitCode.toString().padStart(2, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request PLC status\n *\n * @see 4.25.5 Request PLC status (ps)\n */\nexport default class PlcDeviceStatusRequest extends ElkCommand {\n  constructor(readonly bank: number) {\n    super('p', 's', bank.toString());\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Toggle PLC Device\n *\n * @see 4.25.7 Toggle PLC Device (pt)\n */\nexport default class PlcDeviceToggle extends ElkCommand {\n  constructor(readonly houseCode: string, readonly unitCode: number) {\n    super('p', 't', houseCode + unitCode.toString().padStart(2, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Real Time Clock Data\n *\n * @see 4.28.1 Request Real Time Clock Data (rr)\n */\nexport default class RealTimeClockDataRequest extends ElkCommand {\n  constructor() {\n    super('r', 'r');\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport DayOfWeek from '../../enums/DayOfWeek';\nimport MonthOfYear from '../../enums/MonthOfYear';\n\n/**\n * Write Real Time Clock Data\n *\n * @see 4.28.3 Write Real Time Clock Data (rw)\n */\nexport default class RealTimeClockDataWrite extends ElkCommand {\n  constructor(\n    readonly year: number,\n    readonly month: MonthOfYear,\n    readonly day: number,\n    readonly dayOfWeek: DayOfWeek,\n    readonly hour: number,\n    readonly minutes: number,\n    readonly seconds: number\n  ) {\n    super(\n      'r',\n      'w',\n      seconds.toString().padStart(2, '0') +\n        minutes.toString().padStart(2, '0') +\n        hour.toString().padStart(2, '0') +\n        dayOfWeek.toString() +\n        day.toString().padStart(2, '0') +\n        month.toString().padStart(2, '0') +\n        year\n          .toString()\n          .padStart(2, '0')\n          .substr(-2)\n    );\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Speak Phrase at Voice/Siren Output\n *\n * @see 4.32.2 Speak Phrase at Voice/Siren Output (sp)\n */\nexport default class SpeakPhrase extends ElkCommand {\n  constructor(readonly phraseNumber: number) {\n    super('s', 'p', phraseNumber.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Speak Word at Voice/Siren Output\n *\n * @see 4.32.1 Speak Word at Voice/Siren Output (sw)\n */\nexport default class SpeakWord extends ElkCommand {\n  constructor(readonly wordNumber: number) {\n    super('s', 'w', wordNumber.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request System Log Data\n *\n * Request to get system log data entry. The first entry is\n * index “1”, the last entry is index “511”. Log data index\n * “0” is the next location to be written, index 511 is\n * the oldest log data.\n *\n * @see 4.23.1 Request System Log Data (ld)\n */\nexport default class SystemLogDataReadRequest extends ElkCommand {\n  constructor(readonly logIndex: number) {\n    super('l', 'd', logIndex.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport LogWriteType from '../../enums/LogWriteType';\n\n/**\n * Request Write Log Data\n *\n * The Write Log Data Command “le” writes log data into the\n * M1 log specifically to trigger communicator reporting to\n * the central station. A valid zone must be programmed for\n * communicator reporting. The M1 will return an “OK”crlf\n * response when the data is written to the log.\n *\n * @see 4.23.2 Request Write Log Data (le)\n */\nexport default class SystemLogDataWriteRequest extends ElkCommand {\n  constructor(\n    readonly logType: LogWriteType,\n    readonly eventType: number,\n    readonly zoneNumber: number,\n    readonly areaNumber: number\n  ) {\n    super(\n      'l',\n      'e',\n      logType.toString().padStart(3, '0') +\n        eventType\n          .toString()\n          .padStart(4, '0')\n          .substr(-3) +\n        zoneNumber.toString().padStart(3, '0') +\n        areaNumber.toString()\n    );\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request System Trouble Status\n *\n * This command allows automation equipment to poll for\n * system trouble status. Firmware revision 4.5.4, 5.1.4\n * and after. This message will automatically be sent\n * upon a trouble status change.\n *\n * @see 4.30.1 Request System Trouble Status (ss)\n */\nexport default class SystemTroubleStatusRequest extends ElkCommand {\n  constructor() {\n    super('s', 's');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Task Activation\n *\n * You can use your PC to send a command to activate a Task. Tasks\n * are event flags that are common to the telephone remote control\n * option 2, the keypad user menu option 1, the Whenever/Then\n * programming, and the ASCII string programming. Any one of these\n * methods can activate a Task (events 2001 to 2032). The\n * Whenever/Then programming rules can then issue control commands\n * when a Task has been activated. When all rules that are activated\n * from the Task is serviced, the Task will be de-activated.\n *\n * The data portion of the Task Activation command, DDD, is three\n * decimal ASCII digits (1 base) corresponding to the number of the\n * desired Task to activate. Range: 001 to 032. This value is a three\n * digit value for future expansion.\n *\n * @see 4.34 Task Activation (tn)\n */\nexport default class TaskActivation extends ElkCommand {\n  constructor(readonly taskNumber: number) {\n    super('t', 'n', taskNumber.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Temperature Data\n *\n * This command allows automation equipment to request\n * the temperatures from zone temperature sensors and\n * keypad temperatures in one ASCII packet.\n * M1 Version 4.3.4 andafter.\n *\n * @see 4.24.1 Request Temperature Data (lw)\n */\nexport default class TemperatureDataRequest extends ElkCommand {\n  constructor() {\n    super('l', 'w');\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport TemperatureDeviceType from '../../enums/TemperatureDeviceType';\n\n/**\n * Request Temperature format\n *\n * This request command allows automation equipment to read\n * temperatures of the temperature probes connected to zones\n * 1 to 16, Keypad temperature from the sensor in each LCD\n * keypad, and Thermostat temperatures. Each Group can have\n * up to 16 temperature sensors.\n *\n * Version 4.2.8 and later sends automatic temperature updates\n * out Port 0 when any temperature device parameter changes.\n *\n * @see 4.31.1 Request Temperature format (st)\n */\nexport default class TemperatureRequest extends ElkCommand {\n  constructor(readonly deviceType: TemperatureDeviceType, readonly deviceNumber: number) {\n    super('s', 't', deviceType.toString() + deviceNumber.toString().padStart(2, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport TextDescriptionType from '../../enums/TextDescriptionType';\n\n/**\n * Request ASCII String Text Descriptions\n *\n * This request command allows automation equipment to read\n * the text descriptions that are stored in the control.\n *\n * The control will response with a {@link TextDescriptionResponse}.\n *\n * NOTE! The {@link TextDescriptionResponse} may not be for the\n * `address` requested! If there is no description for the requested\n * address the next addresses will be searched until one with a\n * description is found (or, if none are found, an address of `0` will\n * be returned).\n *\n * From the protocol specification:\n * > If the first character in a requested name is a “space” or less,\n * > then the next names are searched until a name is found whose first\n * > character is greater than “space” or the “Show On Keypad” bit is\n * > set. If no valid names are found, a “000” for the NNN address is\n * > returned. This speeds up the loading of names so that invalid\n * > names are not returned. M1 version 2.4.6 or later.\n *\n * @see 4.29.1 Request ASCII String Text Descriptions (sd)\n */\nexport default class TextDescriptionRequest extends ElkCommand {\n  constructor(readonly textType: TextDescriptionType, readonly address: number) {\n    super('s', 'd', textType.toString().padStart(2, '0') + address.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Thermostat Data\n *\n * This command allows automation equipment to monitor and control\n * HVAC Thermostats connected to the M1. All temperature settings\n * are expressed in ASCII Decimal, two digits. M1 Version 4.2.6 and after.\n *\n * @see 4.35.1 Request Thermostat Data (tr)\n */\nexport default class ThermostatDataRequest extends ElkCommand {\n  constructor(readonly thermostatNumber: number) {\n    super('t', 'r', thermostatNumber.toString().padStart(2, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport ThermostatSetType from '../../enums/ThermostatSetType';\n\n/**\n * Set Thermostat Data\n *\n * @see 4.35.3 Set Thermostat Data (ts)\n */\nexport default class ThermostatSet extends ElkCommand {\n  constructor(\n    readonly thermostatNumber: number,\n    readonly value: number,\n    readonly element: ThermostatSetType\n  ) {\n    super(\n      't',\n      's',\n      thermostatNumber.toString().padStart(2, '0') +\n        value.toString().padStart(2, '0') +\n        element.toString()\n    );\n  }\n}\n","import ThermostatSet from './ThermostatSet';\nimport ThermostatSetType from '../../enums/ThermostatSetType';\n\n/**\n * Set Thermostat Data\n *\n * @see 4.35.3 Set Thermostat Data (ts)\n */\nexport default class ThermostatSetCoolSetPoint extends ThermostatSet {\n  constructor(thermostatNumber: number, readonly temperature: number) {\n    super(thermostatNumber, temperature, ThermostatSetType.CoolSetPoint);\n  }\n}\n","import ThermostatSet from './ThermostatSet';\nimport ThermostatSetType from '../../enums/ThermostatSetType';\n\n/**\n * Set Thermostat Data\n *\n * @see 4.35.3 Set Thermostat Data (ts)\n */\nexport default class ThermostatSetFan extends ThermostatSet {\n  constructor(thermostatNumber: number, readonly isOn: boolean) {\n    super(thermostatNumber, isOn ? 1 : 0, ThermostatSetType.Fan);\n  }\n}\n","import ThermostatSet from './ThermostatSet';\nimport ThermostatSetType from '../../enums/ThermostatSetType';\n\n/**\n * Set Thermostat Data\n *\n * @see 4.35.3 Set Thermostat Data (ts)\n */\nexport default class ThermostatSetHeatSetPoint extends ThermostatSet {\n  constructor(thermostatNumber: number, readonly temperature: number) {\n    super(thermostatNumber, temperature, ThermostatSetType.HeatSetPoint);\n  }\n}\n","import ThermostatSet from './ThermostatSet';\nimport ThermostatSetType from '../../enums/ThermostatSetType';\n\n/**\n * Set Thermostat Data\n *\n * @see 4.35.3 Set Thermostat Data (ts)\n */\nexport default class ThermostatSetHold extends ThermostatSet {\n  constructor(thermostatNumber: number, readonly isOn: boolean) {\n    super(thermostatNumber, isOn ? 1 : 0, ThermostatSetType.Hold);\n  }\n}\n","import ThermostatSet from './ThermostatSet';\nimport ThermostatMode from '../../enums/ThermostatMode';\nimport ThermostatSetType from '../../enums/ThermostatSetType';\n\n/**\n * Set Thermostat Data\n *\n * @see 4.35.3 Set Thermostat Data (ts)\n */\nexport default class ThermostatSetMode extends ThermostatSet {\n  constructor(thermostatNumber: number, readonly mode: ThermostatMode) {\n    super(thermostatNumber, mode - 48, ThermostatSetType.Mode);\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Valid User Code Areas\n *\n * This request command allows automation equipment to send a\n * user code to the control and have returned what areas the\n * code is valid in. The returned value is an 8 bit masked value\n * with bit 0 corresponding to area 1, up to bit 7 corresponding\n * to area 8. If the returned value is 0, then the code is not valid\n * in any area. M1 Version 4.2.5 , type of code is in Version 4.3.6\n * and after.\n *\n * @see 4.37.1 Request Valid User Code Areas (ua)\n */\nexport default class UserCodeAreasRequest extends ElkCommand {\n  constructor(readonly userCode: string) {\n    super('u', 'a', userCode.padStart(6, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\nimport UserCode from '../../models/UserCode';\nimport { RESERVED_DEFAULT } from '../constants';\nimport UserCodeChangeType from '../../enums/UserCodeChangeType';\n\n/**\n * Encodes selected area numbers.\n *\n * Two ASCII Hex characters, 0-9,A-F, using the Hex value of each\n * character as the mask for 4 areas. Right most character is\n * areas 1 to 4 with bit 0 equal to Area 1.\n *\n * @param areaNumbers An array of area numbers to encode\n * @return {string} The area numbers encoded as hex.\n */\nexport function encodeAreaNumbers(areaNumbers?: number[]) {\n  if (!areaNumbers || !areaNumbers.length) {\n    return '00';\n  }\n\n  // Start with an array of all 0s, replacing any area numbers with 1's.\n  const bitValues = areaNumbers\n    .reduce(\n      (bits, areaNumber) =>\n        bits\n          .slice(0, areaNumber - 1)\n          .concat(1)\n          .concat(bits.slice(areaNumber)),\n      [0, 0, 0, 0, 0, 0, 0, 0]\n    )\n    .reverse(); // reverse: bit 0 = area 1, etc.\n\n  // Join them as a single string and parse them as a binary number,\n  // then convert them to a 2-character hex string.\n  return parseInt(bitValues.join(''), 2)\n    .toString(16)\n    .padStart(2, '0')\n    .toUpperCase();\n}\n\nfunction generateData(\n  userNumber: number,\n  masterOrCurrentUserCode: string | UserCode,\n  newUserCode: string | UserCode,\n  areaNumbers?: number[]\n) {\n  const authCode =\n    typeof masterOrCurrentUserCode === 'string'\n      ? new UserCode(masterOrCurrentUserCode)\n      : masterOrCurrentUserCode;\n  const newCode = typeof newUserCode === 'string' ? new UserCode(newUserCode) : newUserCode;\n  return (\n    userNumber.toString().padStart(3, '0') +\n    authCode.encode() +\n    newCode.encode() +\n    encodeAreaNumbers(areaNumbers)\n  );\n}\n\n/**\n * Request Change User Code\n *\n * This command allows automation equipment to change a user code. The\n * data packet must include a Master User Code or the current user code\n * of the user code to be changed. 4.3.9 and after.\n *\n * @see 4.11.1 Request Change User Code (cu)\n */\nexport default class UserCodeChangeRequest extends ElkCommand {\n  readonly newUserCode: UserCode;\n  readonly authorizationUserCode: UserCode;\n\n  constructor(\n    readonly userNumber: number,\n    masterOrCurrentUserCode: string | UserCode,\n    newUserCode: string | UserCode,\n    readonly areaNumbers?: number[],\n    readonly changeType: UserCodeChangeType = UserCodeChangeType.UserCode\n  ) {\n    super('c', 'u', generateData(userNumber, masterOrCurrentUserCode, newUserCode, areaNumbers));\n    this.authorizationUserCode =\n      typeof masterOrCurrentUserCode === 'string'\n        ? new UserCode(masterOrCurrentUserCode)\n        : masterOrCurrentUserCode;\n    this.newUserCode = typeof newUserCode === 'string' ? new UserCode(newUserCode) : newUserCode;\n  }\n\n  get reserved(): string {\n    return this.changeType.toString() + '0';\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request M1 Version Number\n *\n * The vn command requests the M1’s version number,\n * and the VN command replies with the version number\n * data. If an M1XEP is connected to the M1, the M1XEP’s\n * version number will also be included. Available in M1\n * version 4.1.12 or 5.1.12 and later. M1XEP 1.3.2 or later.\n *\n * @see 4.36.1 Request M1 Version Number (vn)\n */\nexport default class VersionNumberRequest extends ElkCommand {\n  constructor() {\n    super('v', 'n');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Zone Bypass Request\n *\n * This command allows for bypassing/unbypassing a zone.\n * Zone = 000 will unbypass all burglar zones in the.\n * Zone = 999 will bypass all violated burglar zones.\n * Area to bypass/unbypass is required if Zone equals\n * 000 or 999 otherwise it is ignored.\n *\n * @see 4.40.1 Zone Bypass Request (zb)\n */\nexport default class ZoneBypassRequest extends ElkCommand {\n  constructor(\n    readonly pinCode: string,\n    readonly zoneNumber: number,\n    readonly areaNumber: number = 0\n  ) {\n    super(\n      'z',\n      'b',\n      zoneNumber.toString().padStart(3, '0') + areaNumber.toString() + pinCode.padStart(6, '0')\n    );\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Zone Definition\n *\n * This command allows automation equipment to request the\n * zone definitions. 4.2.6 and after.\n *\n * @see 4.41.1 Request Zone Definition (zd)\n */\nexport default class ZoneDefinitionRequest extends ElkCommand {\n  constructor() {\n    super('z', 'd');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Zone Partition Request\n *\n * The Control panel responds with a {@link ZonePartitionReport}\n * which tells what Area is assigned to each zone.\n *\n * @see 4.40.3 Zone Partition Request (zp)\n */\nexport default class ZonePartitionRequest extends ElkCommand {\n  constructor() {\n    super('z', 'p');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Zone Status Request\n *\n * The control panel responds with a {@link ZoneStatusReport}.\n *\n * Note: This message should be sent only when an initial\n * connection is made with the control panel. It is not\n * intended to be used as a ‘polling’ command. The control\n * panel can be programmed to send zone and system status\n * messages whenever the status changes with Global Programming\n * Location 33 – 37 in the M1 Control.\n *\n * @see 4.40.5 Zone Status Request (zs)\n */\nexport default class ZoneStatusRequest extends ElkCommand {\n  constructor() {\n    super('z', 's');\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Zone Trigger\n *\n * This command allows a 3rd party integration device to trigger\n * an alarm condition on a EOL hardwired zone defined with any\n * of the Burglary zone types and many other zone types up to\n * zone type 26. This command creates a virtual momentary open\n * condition on the zone as if the EOL hardwired loop had been\n * physically opened. This requires M1 Version 4.5.23, 5.1.23\n * or later. Caution: This command cannot create a virtual short\n * condition and therefore cannot trigger an alarm condition for\n * zone types that require a short. i.e. Fire zone alarms cannot\n * be triggered.\n *\n * @see 4.42.1 Zone Trigger (zt)\n */\nexport default class ZoneTrigger extends ElkCommand {\n  constructor(readonly zoneNumber: number) {\n    super('z', 't', zoneNumber.toString().padStart(3, '0'));\n  }\n}\n","import ElkCommand from './ElkCommand';\n\n/**\n * Request Zone Voltage\n *\n * This command allows automation equipment to request a\n * zone analog voltage level. M1 Version 4.2.8 and after.\n *\n * @see 4.43.1 Request Zone Voltage (zv)\n */\nexport default class ZoneVoltageRequest extends ElkCommand {\n  constructor(readonly zoneNumber: number) {\n    super('z', 'v', zoneNumber.toString().padStart(3, '0'));\n  }\n}\n"],"names":["ArmUpState","AlarmState","ZoneDefinition","CustomValueFormat","UserCodeChangeType","SystemTroubleType","TemperatureDeviceType","EntryExitTimer","DisplayTextClearOption","FunctionKey","ThermostatSetType"],"mappings":"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"}